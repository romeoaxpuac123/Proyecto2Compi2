/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,7],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,8],$V6=[1,9],$V7=[5,10,22,26,27,28,29,30],$V8=[1,18],$V9=[1,24],$Va=[7,10,16,19,20,24,26,27,28,32,35,36,40,42,43],$Vb=[2,3],$Vc=[1,27],$Vd=[5,7,10,22,24,26,27,28,29,30],$Ve=[1,31],$Vf=[1,40],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[1,38],$Vn=[1,39],$Vo=[13,24],$Vp=[1,48],$Vq=[1,47],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[1,60],$VD=[1,61],$VE=[5,7,10,13,16,22,24,26,27,28,29,30,32,35,36,40,42,43,49,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$VF=[5,7,10,13,16,22,24,26,27,28,29,30,32,35,36,40,42,43,49,56,58,63,64,65,66,67,68,69,70,71],$VG=[5,7,10,13,16,22,24,26,27,28,29,30,32,35,36,40,42,43,49,56,58,59,60,62,63,64,65,66,67,68,69,70,71],$VH=[5,7,10,13,16,22,24,26,27,28,29,30,32,35,36,40,42,43,49,63,64,65,66,67,68,69,70,71],$VI=[5,7,10,13,16,22,24,26,27,28,29,30,32,35,36,40,42,43,49,67,68,69],$VJ=[5,7,10,13,16,22,24,26,27,28,29,30,32,35,36,40,42,43,49,67,68,69,70,71],$VK=[1,110],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,109],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[10,16,26,27,28,32,35,36,40,42,43],$VV=[2,57],$VW=[1,149],$VX=[1,158],$VY=[1,150],$VZ=[1,151],$V_=[1,152],$V$=[1,153],$V01=[1,154],$V11=[1,155],$V21=[1,156],$V31=[1,157],$V41=[1,162],$V51=[1,161],$V61=[1,163],$V71=[1,167],$V81=[13,16,24],$V91=[1,175],$Va1=[1,174],$Vb1=[1,176],$Vc1=[1,177],$Vd1=[1,178],$Ve1=[1,179],$Vf1=[1,180],$Vg1=[1,181],$Vh1=[1,182],$Vi1=[1,183],$Vj1=[1,184],$Vk1=[1,185],$Vl1=[1,186],$Vm1=[1,187],$Vn1=[1,188],$Vo1=[7,10,13,16,19,32,45,51,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71],$Vp1=[10,16,32,45,51,54],$Vq1=[7,10,13,16,19,32,45,51,54,56,58,63,64,65,66,67,68,69,70,71],$Vr1=[7,10,13,16,19,32,45,51,54,56,58,59,60,62,63,64,65,66,67,68,69,70,71],$Vs1=[7,10,13,16,19,32,45,51,54,63,64,65,66,67,68,69,70,71],$Vt1=[7,10,13,16,19,32,45,51,54,67,68,69],$Vu1=[7,10,13,16,19,32,45,51,54,67,68,69,70,71],$Vv1=[1,268],$Vw1=[16,45,51],$Vx1=[10,16,26,27,28,32,35,36,40,42,43,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"PTCOMA":6,"PTyCOMA":7,"instruccion":8,"VISIBILIDAD":9,"ID":10,"PARIZQ":11,"lista_Parametros":12,"PARDER":13,"LLAVIZQ":14,"lista_instrucciones":15,"LLAVDER":16,"TIPOS2":17,"ID_LISTA":18,"DOSP":19,"IGUAL":20,"expresion":21,"IMPORTAR":22,"LISTA_ARCHIVOS":23,"COMA":24,"ARCHIVO":25,"VAR":26,"CONST":27,"GLOBAL":28,"PUBLIC":29,"PRIVATE":30,"instruccion2":31,"IMPRMIR":32,"lista_Expresiones":33,"TIPOS":34,"RETORNO":35,"ELIF":36,"lista_instrucciones3":37,"LISTA_ELSE":38,"EL_COSOELSE":39,"ELWHILE":40,"expresion2":41,"ELDO":42,"BIFURCACION":43,"LISTA_CASES":44,"DEFECTO":45,"INCREMENTO":46,"DECINCREMENTO":47,"CORIZQ":48,"CORDER":49,"ARREGLOxD":50,"CASO":51,"ELELSE":52,"instruccion3":53,"EL_BREAK":54,"lista_Expresiones2":55,"MENOS":56,"NOT":57,"MAS":58,"POR":59,"DIVIDIDO":60,"POTENCIA":61,"MODULO":62,"MAYOR":63,"MENOR":64,"MENORIGUAL":65,"MAYORIGUAL":66,"AND":67,"OR":68,"XOR":69,"IGUALDAD":70,"DESIGUALDAD":71,"ENTERO":72,"DECIMAL":73,"CARACTER":74,"VERDADERO":75,"FALSO":76,"CADENA":77,"LINEALIZAR":78,"LARGO":79,"LARGO2":80,"MAYUSCULAS":81,"MINUSCULAS":82,"UNCARACTER":83,"lista_expresion2es2":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTyCOMA",10:"ID",11:"PARIZQ",13:"PARDER",14:"LLAVIZQ",16:"LLAVDER",19:"DOSP",20:"IGUAL",22:"IMPORTAR",24:"COMA",25:"ARCHIVO",26:"VAR",27:"CONST",28:"GLOBAL",29:"PUBLIC",30:"PRIVATE",32:"IMPRMIR",35:"RETORNO",36:"ELIF",40:"ELWHILE",42:"ELDO",43:"BIFURCACION",45:"DEFECTO",46:"INCREMENTO",47:"DECINCREMENTO",48:"CORIZQ",49:"CORDER",50:"ARREGLOxD",51:"CASO",52:"ELELSE",54:"EL_BREAK",56:"MENOS",57:"NOT",58:"MAS",59:"POR",60:"DIVIDIDO",61:"POTENCIA",62:"MODULO",63:"MAYOR",64:"MENOR",65:"MENORIGUAL",66:"MAYORIGUAL",67:"AND",68:"OR",69:"XOR",70:"IGUALDAD",71:"DESIGUALDAD",72:"ENTERO",73:"DECIMAL",74:"CARACTER",75:"VERDADERO",76:"FALSO",77:"CADENA",78:"LINEALIZAR",79:"LARGO",80:"LARGO2",81:"MAYUSCULAS",82:"MINUSCULAS",83:"UNCARACTER",84:"lista_expresion2es2"},
productions_: [0,[3,2],[6,1],[6,0],[4,2],[4,1],[4,1],[8,9],[8,6],[8,5],[8,3],[23,3],[23,1],[17,1],[17,1],[17,1],[17,1],[9,1],[9,1],[12,4],[12,2],[12,0],[15,2],[15,1],[31,5],[31,5],[31,6],[31,5],[31,3],[31,4],[31,3],[31,9],[31,8],[31,8],[31,7],[31,7],[31,9],[31,7],[31,10],[31,3],[31,3],[31,9],[31,8],[44,5],[44,4],[39,4],[38,9],[38,8],[37,2],[37,1],[53,5],[53,4],[53,2],[53,3],[53,3],[33,3],[33,1],[33,0],[18,3],[18,1],[34,1],[34,1],[34,1],[34,1],[55,3],[55,1],[55,0],[21,2],[21,2],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,4],[21,3],[21,4],[21,4],[21,2],[21,2],[21,2],[21,2],[21,4],[41,2],[41,2],[41,2],[41,2],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[41,4],[41,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			document.getElementById("Reporte_Errores").innerHTML = "";
			document.getElementById("Reporte_Errores").innerHTML = "";
			var ReporteErrores = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Dando estilo a tablas</title>";
			ReporteErrores += "<link rel=\"stylesheet\" type=\"text/css\" href=\"tablas.css\"></head><body><div id=\"main-container\">";
			ReporteErrores += "<table><thead><tr><th>TIPO</th><th>DESCRIPCION</th><th>LINEA</th><th>COLUMNA</th></tr></thead>";

			ReporteErrores += Entorno1.LosErrores;
			ReporteErrores += "</table></div></body></html>"

			document.getElementById("Reporte_Errores").innerHTML = ReporteErrores;

			var nuevo = new Nodo("INICIO");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "INICIO" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
		
			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);


		//Vamos a mostra tooodos los cosos
		var Cadena_Inicio = "var ";
		for (var i = 1; i <= Entorno1.numero; i++) {
			if(i == Entorno1.numero){
				Cadena_Inicio = Cadena_Inicio + " t" + i + ";\n";
			}else{
				Cadena_Inicio = Cadena_Inicio + " t" + i + ",";
			}
			
		}
		if(Entorno1.numero == 0){
			Cadena_Inicio = "";
		}
		Cadena_Inicio = Cadena_Inicio + "var Stack[]; \nvar Heap[];\nvar P = 0;\nvar H = 0;\n"
		//console.log("CIRUGIA->" + Cadena_Inicio);
		document.getElementById("texto1C3D").innerHTML = Cadena_Inicio + document.getElementById("texto1C3D").value;
		Entorno1.numero = 0;
		Entorno1.etiquetas = 0;

		console.log("RESULTADO CODIGO DOT");
		GraficasDOT.anadir("}");
		console.log(GraficasDOT.ResultCadena());
		console.log("fin DOT");
		document.getElementById("numero1x").innerHTML = GraficasDOT.ResultCadena();
			
		GraficasDOT.Renovar();
		Entorno1.direccion = "";
		Entorno1.SIMBOLOS.splice(0, Entorno1.SIMBOLOS.length);
		Entorno1.TipoVariablesFUNCIONGLOBAL.splice(0, Entorno1.TipoVariablesFUNCIONGLOBAL.length);
        Entorno1.VariableVariablesFUNCIONGLOBAL.splice(0, Entorno1.VariableVariablesFUNCIONGLOBAL.length);
        Entorno1.TesVariablesFUNCIONGLOBAL.splice(0,Entorno1.TesVariablesFUNCIONGLOBAL.length);
	
break;
case 4:

			

			var nuevo = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var nuevo2 = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	Entorno1.direccion = ""; 

			this.$ = nuevo2;
			
	
break;
case 5:

			var nuevo = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var nuevo2 = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);
			document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	Entorno1.direccion = ""; 
			this.$ = nuevo2;
	
break;
case 6:

		alert('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
        console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
		Entorno1.LosErrores +="<tr>";
		Entorno1.LosErrores += "<td>" + "sintáctico" + "  </td>" ;
		Entorno1.LosErrores += "<td>" +  "Expresion incorrecta"  + " </td>";
		Entorno1.LosErrores += "<td>" + this._$.first_line  + "</td>";
		Entorno1.LosErrores += "<td>" + this._$.first_column + "</td>";
		Entorno1.LosErrores += "</tr>";

		
break;
case 7:

				Entorno1.nombreentorno = $$[$0-6];
				var nuevo = new Funciones("Funciones");
				var NombreFuncion = new Nodo($$[$0-6]);
				nuevo.Hijos[0] = NombreFuncion;
				nuevo.TipoDato = $$[$0-7];
				contador = contador + 1;
				nuevo.NumeroDeNodo = contador;

				nuevo.linea = this._$.first_line;
				nuevo.columna = this._$.first_column;

				var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_FUNCION" + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				

				
				contador = contador + 1;
				var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-6] + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo3);

				var Conexion2 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
				GraficasDOT.anadir(Conexion2);

				var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
				GraficasDOT.anadir(Conexion1);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
				GraficasDOT.anadir(Conexion3);


				this.$ =  nuevo.Ejecutar(Entorno1); 
break;
case 8:

		
		console.log("DEC1 globales");
		var nuevo = new VariablesGlobales("VARIABLES");
		//var Tipo = new Nodo($$[$0-5]);
		nuevo.Hijos[0] = $$[$0-5];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

		var Conexion1xZx = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZx);

		this.$ = nuevo.Ejecutar(Entorno1);
			
	
break;
case 9:

		
		console.log("DEC1 globales");
		var nuevo = new VariablesGlobales("VARIABLES");
		//var Tipo = new Nodo($$[$0-4]);
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-3].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

		var Conexion1xZx = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZx);

		this.$ = nuevo.Ejecutar(Entorno1);
			
	
break;
case 10:

		var nuevo = new Importar("Importar");
		this.$ = nuevo.Ejecutar(Entorno1);
		//hola
	
break;
case 11: case 12:

		Entorno1.ListaArchivos.push($$[$0]);
	
break;
case 13: case 60:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "VAR" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 14: case 61:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "CONST" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 15: case 62:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "GLOBAL" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 16: case 63:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 19:

			//Entorno1.tamanioentorno += 1;
			var nuevo = new Parametros ("PARAMETROS");
			var nuevovalor2 = new Nodo($$[$0]);
			nuevo.Hijos[0] = nuevovalor2;
		    nuevo.TipoDato = $$[$0-1];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			contador = contador + 1;
			var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo3);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1)+ "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" +  contador + "\n";
			GraficasDOT.anadir(Conexion2);
			//nuevo.Ejecutar(Entorno1);
			

			var nuevo2 = new Parametros ("PARAMETROS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo1x = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "LISTA_PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1x);
			
			var Conexion2X = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" +  nuevo.NumeroDeNodo+ "\n";
			GraficasDOT.anadir(Conexion2X);
			
			var Conexion2XX = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" +  $$[$0-3].NumeroDeNodo+ "\n";
			GraficasDOT.anadir(Conexion2XX);
			nuevo.Ejecutar(Entorno1);

			
			this.$ =  nuevo2;
	
break;
case 20:

			//Entorno1.numero += 1;
			//Entorno1.valordep = Entorno1.numero += 1;
			//Entorno1.tamanioentorno += 1;
			var nuevo = new Parametros ("PARAMETROS");
			var nuevovalor2 = new Nodo($$[$0]);
			nuevo.Hijos[0] = nuevovalor2;
		    nuevo.TipoDato = $$[$0-1];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			contador = contador + 1;
			var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo3);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1)+ "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" +  contador + "\n";
			GraficasDOT.anadir(Conexion2);
			nuevo.Ejecutar(Entorno1);
			//this.$ =  nuevo.Ejecutar(Entorno1);
			var nuevop = new Parametros ("LISTA_PARAMETROS");
			contador = contador + 1;
			nuevop.NumeroDeNodo =  contador;

			var Hijo1x = "node_"+ nuevop.NumeroDeNodo + "[shape=circle label=\"" + "LISTA_PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1x);

			var Conexion1x = "node_" + nuevop.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo+ "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevop;
			
	
break;
case 21:
	     //Entorno1.valordep = Entorno1.numero += 1;
			//Entorno1.tamanioentorno += 1;
			var nuevo = new Nodo ("PARAMETROS");
			
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			//Entorno1.valordep = Entorno1.numero += 1;
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SIN_PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
		
break;
case 22:

		
			var nuevo = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var nuevo2 = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	//Entorno1.direccion = ""; 

			this.$ = nuevo2;
	
break;
case 23:

		var nuevo = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var nuevo2 = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);
			//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	//Entorno1.direccion = ""; 
			this.$ = nuevo2;
		console.log("hola lista2");
	
break;
case 24:

		console.log("PASO POR IMPRIMIR");
		//console.log('El valor de la expresión es: ' + $$[$0-2].Nombre);
		//respuesta = respuesta + '->' + $$[$0-2].Ejecutar() + "\n";
        //document.getElementById("salida").innerHTML = respuesta;
		var nuevo = new Imprimir("Imprimir");
		nuevo.Hijos[0] = $$[$0-2];
		
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IMP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo1);	

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + "EXP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo2);	

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion2 = "node_" + contador + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion2);
		//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +entorno.direccion + "\n";
        //entorno.direccion = ""; 
		nuevo.Ejecutar(Entorno1);
		this.$ = nuevo;
	
break;
case 25:

		//llamada de funcion principal();
				var nuevo = new LLamadas("LLamada");
				var NombreFuncion = new Nodo($$[$0-4]);
				nuevo.Hijos[0] = NombreFuncion;
				contador = contador + 1;
				nuevo.NumeroDeNodo = contador;
				
				nuevo.linea = this._$.first_line;
				nuevo.columna = this._$.first_column;
				
				
				var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "LLAMADA_FUNCION" + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				contador = contador + 1;
				var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-4] + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo2);	

				var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
				GraficasDOT.anadir(Conexion1);

				var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
				GraficasDOT.anadir(Conexion1xZ);
				

				this.$ =  nuevo.Ejecutar(Entorno1);

	
break;
case 26:

		console.log("DEC1");
		var nuevo = new Variables ("VARIABLES");
		//var Tipo = new Nodo($$[$0-5]);
		nuevo.Hijos[0] = $$[$0-5];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

		var Conexion1xZx = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZx);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 27:

		console.log("DEC1");
		var nuevo = new Variables ("VARIABLES");
		//var Tipo = new Nodo($$[$0-4]);
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-3].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

		var Conexion1xZx = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZx);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 28:

		var nuevo = new Variables2 ("VARIABLES");
		//var Tipo = new Nodo($$[$0-2]);
		nuevo.Hijos[0] = $$[$0-2];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

	

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 29:

		var nuevo = new ModificarVariables ("VARIABLES");
		var identificador = new Nodo($$[$0-3]);
		nuevo.Hijos[0] = identificador;
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "MOD_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 30:

		var nuevo = new Retorno("RETORNO"); 
        nuevo.Hijos[0] = $$[$0-1];

		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "RETORNO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 31:

		//IFELSEIFELSE
		//if muchs if elses
		Entorno1.direccionIF = "";
		var nuevo = new IFELSEIFELSE("IF");
		nuevo.TipoDato = $$[$0-8];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		nuevo.Hijos[0] = $$[$0-3];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.Hijos[2] = $$[$0-6];
		nuevo.Hijos[3] = $$[$0];

		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-6].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-3].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3); 

		this.$ = nuevo.Ejecutar(Entorno1);

	
break;
case 32:

		//if muchs if elses
		Entorno1.direccionIF = "";
		var nuevo = new IfElseIF("IF");
		nuevo.TipoDato = $$[$0-7];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		nuevo.Hijos[0] = $$[$0-2];
		nuevo.Hijos[1] = $$[$0];
		nuevo.Hijos[2] = $$[$0-5];

		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 33:

		Entorno1.direccionIF = "";
		var nuevo = new IFELSE("IF");
		nuevo.TipoDato = $$[$0-7];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-5];
		nuevo.Hijos[1] = $$[$0-2];
		//nuevo.Hijos[1].ListaSentencias = $$[$0-2].ListaSentencias;
		nuevo.Hijos[2] = $$[$0];
		//nuevo.Hijos[2].ListaSentencias = $$[$0].ListaSentencias;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xXY = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xXY);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 34:

		var nuevo = new EL_IF("IF");
		nuevo.TipoDato = $$[$0-6];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);

	
break;
case 35:

		var nuevo = new EL_WHILE("WHILE");
		nuevo.TipoDato = $$[$0-6];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "WHILE" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 36:

		var nuevo = new DO_WHILE("WHILE");
		nuevo.TipoDato = $$[$0-8];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-6];
		nuevo.Hijos[1] = $$[$0-2];
		
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DO-WHILE" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-6].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 37:

		var nuevo = new SWITCH("WHILE");
		nuevo.TipoDato = $$[$0-6];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SWITCH" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 38:

		var nuevo = new SWITCHD("WHILE");
		nuevo.TipoDato = $$[$0-9];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-7];
		nuevo.Hijos[1] = $$[$0-4];
		nuevo.Hijos[2] = $$[$0-1];

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SWITCH" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-7].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);
		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "DEFAULT" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + contador + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1x);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 39:

		var nuevo = new DECREMENTO("WHILE");
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		var variable = new Nodo($$[$0-2]);
		nuevo.Hijos[0] = variable;

		var simbolo = new Nodo("+");
		nuevo.Hijos[1] = simbolo;

		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DECREMENTO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "++" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 40:

		var nuevo = new DECREMENTO("WHILE");
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		var variable = new Nodo($$[$0-2]);
		nuevo.Hijos[0] = variable;

		var simbolo = new Nodo("-");
		nuevo.Hijos[1] = simbolo;

		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DECREMENTO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "--" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);
		this.$ = nuevo.Ejecutar(Entorno1);
		
	
break;
case 41:

		var nuevo = new Vectores("Vectores");
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		var TipoVector = new Nodo($$[$0-8]);
		nuevo.Hijos[0] = TipoVector;

		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VECTOR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-8] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);


		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 42:

		var nuevo = new VectorString("Vector");
		var variable = new Nodo($$[$0-7]);
		nuevo.Hijos[0] = variable;
		var variable2 = new Nodo($$[$0-2]);
		nuevo.Hijos[1] = variable2;


		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VECTOR2" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-7] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" +  $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);


		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" +  $$[$0-1] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);


		this.$ = nuevo.Ejecutar(Entorno1);


		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 43:

			var nuevo = new Nodo("CASO");
			nuevo.Hijos[0] = $$[$0-2];
			nuevo.Hijos[1] = $$[$0];
			//nuevo.MiCadena = $$[$0-2].MiCadena + $$[$0].MiCadena;
			var nuevo2 = new Nodo("CASO");
			nuevo2.ListaSentencias = $$[$0-4].ListaSentencias;
			nuevo2.ListaSentencias.push(nuevo);
			
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "CASE" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			


			this.$ = nuevo2;

		
break;
case 44:

		var nuevo = new Nodo("CASO");
		
		//nuevo.MiCadena = $$[$0-2].MiCadena + $$[$0].MiCadena;
		
		nuevo.Hijos[0] = $$[$0-2];
		nuevo.Hijos[1] = $$[$0];

		var nuevo2 = new Nodo("ELSE_IF");
		nuevo2.ListaSentencias.push(nuevo);

			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "CASE" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

		this.$ = nuevo2;	

			
	
break;
case 45:

		Entorno1.direccionIF += "##ELSE\n";
		var nuevo = new ELSE("IF");
		nuevo.TipoDato = $$[$0-3];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-1];
		nuevo.ListaSentencias = $$[$0-1].ListaSentencias;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "ELSE" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		

		this.$ = nuevo;
	
break;
case 46:

			var nuevo = new Nodo("ELSE_IF");
			//var Hijo2 = new Nodo("Nodo");
			//Hijo2.ListaSentencias = $$[$0-1].ListaSentencias;
			nuevo.Hijos[0] = $$[$0-4];
			nuevo.Hijos[1] = $$[$0-1];
			nuevo.MiCadena = $$[$0-4].MiCadena + $$[$0-1].MiCadena;
			var nuevo2 = new Nodo("ELSE_IF");
			nuevo2.ListaSentencias = $$[$0-8].ListaSentencias;
			nuevo2.ListaSentencias.push(nuevo);

			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "ELSE IF" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-8].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			this.$ = nuevo2;	
		
break;
case 47:

		var nuevo = new Nodo("ELSE_IF");
		//var Hijo2 = new Nodo("Nodo");
		nuevo.MiCadena = $$[$0-4].MiCadena + $$[$0-1].MiCadena;
		//Hijo2.ListaSentencias = $$[$0-1].ListaSentencias;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var nuevo2 = new Nodo("ELSE_IF");
		nuevo2.ListaSentencias.push(nuevo);

		contador = contador + 1;
		nuevo2.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "ELSE IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

		var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

		this.$ = nuevo2;	

	
break;
case 48:

		var nuevo = new Nodo("LS1");
		nuevo.ListaSentencias = $$[$0-1].ListaSentencias;
		nuevo.ListaSentencias.push($$[$0]);
		contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var nuevo2 = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	//Entorno1.direccion = ""; 
			nuevo.NumeroDeNodo = contador;
			this.$ = nuevo;
	
break;
case 49:

		var nuevo = new Nodo("LS1");
		nuevo.ListaSentencias.push($$[$0]);
		contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var nuevo2 = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);
			nuevo.NumeroDeNodo = contador;
			this.$ = nuevo;
	
break;
case 50:

		
		console.log("PASO POR IMPRIMIR");
	
		var nuevo = new Imprimir2("Imprimir");
		nuevo.MiCadena = $$[$0-2].MiCadena;
		nuevo.Hijos[0] = $$[$0-2];
		
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IMP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo1);	

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + "EXP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo2);	

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion2 = "node_" + contador + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion2);
		//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +entorno.direccion + "\n";
        //entorno.direccion = ""; 
		this.$ = nuevo;
	
break;
case 51:

		var nuevo = new ModificarVariables2 ("VARIABLES");
		nuevo.MiCadena = $$[$0-1].MiCadena;
		var identificador = new Nodo($$[$0-3]);
		nuevo.Hijos[0] = identificador;
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "MOD_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		this.$ = nuevo; //.Ejecutar(Entorno1);
	
break;
case 52:

		var nuevo = new BREAKXD("Break");
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "BREAK" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 53:

		var nuevo = new DECREMENTO2("WHILE");

		var variable = new Nodo($$[$0-2]);
		nuevo.Hijos[0] = variable;

		var simbolo = new Nodo("+");
		nuevo.Hijos[1] = simbolo;

		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DECREMENTO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "++" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);
		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 54:

		var nuevo = new DECREMENTO2("WHILE");

		var variable = new Nodo($$[$0-2]);
		nuevo.Hijos[0] = variable;

		var simbolo = new Nodo("-");
		nuevo.Hijos[1] = simbolo;
		contador += 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DECREMENTO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "--" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);
		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 55:

			Entorno1.ListaParametrosFuncion.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0-2];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo;
	
break;
case 56:

			Entorno1.ListaParametrosFuncion.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			this.$ = nuevo;
	
break;
case 57: case 66:

			var nuevo = new Nodo ("lista_Expresiones");
			
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			//Entorno1.valordep = Entorno1.numero += 1;
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SIN_EXPRESIONES" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 58:

		Entorno1.VariableVariables.push($$[$0]);
			var nuevo = new Nodo("ID_LISTA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "ID_LISTA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);
			
			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador+ "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo ;
	
break;
case 59:

			Entorno1.VariableVariables.push($$[$0]);
			var nuevo = new Nodo("ID_LISTA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "ID_LISTA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			
			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador+ "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo ;

	
break;
case 64:

			Entorno1.ListaParametrosFuncion2.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0-2];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo;
	
break;
case 65:

			Entorno1.ListaParametrosFuncion2.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			this.$ = nuevo;
	
break;
case 67:


				var nuevo = new Nodo("ID");
				var nuevovalor = new Nodo($$[$0-1]);
				nuevo.Hijos[0] = nuevovalor;
				nuevo.TipoDato = "ID";
				nuevo.CadenaDe3D = $$[$0-1];

				var nuevoX = new Nodo("Entero");
				var nuevovalorX = new Nodo("0");
				nuevoX.Hijos[0] = nuevovalorX;
				nuevoX.TipoDato = "Entero";
				nuevoX.CadenaDe3D = "0";


				var nuevoy = new Aritmetica("Aritmetica");
				var operador = new Nodo("+");
				
				nuevoy.Hijos[0] = nuevo;
				nuevoy.Hijos[1] = operador;
				nuevoy.Hijos[2] =  nuevoX;

				nuevoy.linea = this._$.first_line;
				nuevoy.columna = this._$.first_column;

								contador += 1;
				nuevoy.NumeroDeNodo = contador;
				var Hijo1 = "node_"+ nuevoy.NumeroDeNodo + "[shape=circle label=\"" + "DECREMENTO" + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				contador += 1;
				var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				contador += 1;
				var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "++" + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				var Conexion1xX = "node_" + nuevoy.NumeroDeNodo + "->" + "node_" + (contador-1) + "\n";
				GraficasDOT.anadir(Conexion1xX);

				var Conexion1xX = "node_" + nuevoy.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
				GraficasDOT.anadir(Conexion1xX);
				
				this.$ =  nuevoy.Ejecutar(Entorno1);

				var nuevoDEC = new DECREMENTO("WHILE");
				var variable = new Nodo($$[$0-1]);
				nuevoDEC.Hijos[0] = variable;
				var simbolo = new Nodo("+");
				nuevoDEC.Hijos[1] = simbolo;
				nuevoDEC.Ejecutar(Entorno1);
	
	
break;
case 68:

		var nuevo = new Nodo("ID");
		var nuevovalor = new Nodo($$[$0-1]);
		nuevo.Hijos[0] = nuevovalor;
		nuevo.TipoDato = "ID";
		nuevo.CadenaDe3D = $$[$0-1];

		var nuevoX = new Nodo("Entero");
		var nuevovalorX = new Nodo("0");
		nuevoX.Hijos[0] = nuevovalorX;
		nuevoX.TipoDato = "Entero";
		nuevoX.CadenaDe3D = "0";


		var nuevoy = new Aritmetica("Aritmetica");
		var operador = new Nodo("-");
				
		nuevoy.Hijos[0] = nuevo;
		nuevoy.Hijos[1] = operador;
		nuevoy.Hijos[2] =  nuevoX;

		nuevoy.linea = this._$.first_line;
		nuevoy.columna = this._$.first_column;

		contador += 1;
		nuevoy.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevoy.NumeroDeNodo + "[shape=circle label=\"" + "DECREMENTO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);
		contador += 1;
		var Hijo1 = "node_"+ contador + "[shape=circle label=\"" + "--" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1xX = "node_" + nuevoy.NumeroDeNodo + "->" + "node_" + (contador-1) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xX = "node_" + nuevoy.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevoy.Ejecutar(Entorno1);
				

		var nuevoDEC = new DECREMENTO("WHILE");
		var variable = new Nodo($$[$0-1]);
		nuevoDEC.Hijos[0] = variable;
		var simbolo = new Nodo("-");
		nuevoDEC.Hijos[1] = simbolo;
		nuevoDEC.Ejecutar(Entorno1);
				
	
break;
case 69:
 
										//this.$ = $$[$0] *-1;
										//var nuevo = Nodo("Hola");
										//this.$ = nuevo;
										//console.log("DUA LIPA");
										//this.$ = $$[$0-1] * $$[$01]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo("*");

										var nuevo2 = new Nodo("Entero");
										var nuevovalor2 = new Nodo("-1");
										nuevo2.Hijos[0] = nuevovalor2;
										nuevo2.TipoDato = "Entero";
										nuevo2.CadenaDe3D = "-1";

										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] =  nuevo2;
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 70:
 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										nuevo.TipoDato = "Booleano";
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 71:
 
										//this.$ = $$[$0-2] + $$[$0];										
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										
										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
										
									
break;
case 72:
 
										//this.$ = $$[$0-2] - $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 73:
 
										//this.$ = $$[$0-2] * $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 74:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 75:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 76:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 77: case 78: case 79: case 82:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 80: case 81:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	


										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 83: case 84: case 85:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
										
break;
case 86: case 121:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Entero");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Entero";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);									

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ = nuevo;
										
									//	console.log("Leimos un Entero->" + $$[$0]);
									
break;
case 87: case 122:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Entero");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Decimal";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;	

										this.$ = nuevo;
									//	console.log("Leimos un Entero->" + $$[$0]);
									
break;
case 88: case 123:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Caracter");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Caracter";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0].replace("'","").replace("'","") + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ = nuevo;
										console.log("Leimos un Caracter->" + $$[$0]);
									
break;
case 89: case 90: case 124: case 125:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Booleano");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Booleano";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ = nuevo;
										console.log("Leimos un Booleano->" + $$[$0]);
									
break;
case 91: case 126:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Cadena");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Cadena";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0].replace("\"","").replace("\"","") + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ = nuevo;
										console.log("Leimos una cadena->" + $$[$0]);
										
									
break;
case 92: case 127:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("ID");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "ID";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0].replace("\"","").replace("\"","") + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ = nuevo;
										console.log("ID->" + $$[$0]);
										
									
break;
case 93: case 128:

											var nuevo = new Nodo("FuncionRetornoXD");
											var nuevovalor = new Nodo($$[$0-3]);
											nuevo.Hijos[0] = nuevovalor;
											nuevo.TipoDato = "Funcion";
											contador = contador + 1;
											nuevo.NumeroDeNodo = contador;
											var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "Llamar_Funcion" + "\"]" +"\n";									
											GraficasDOT.anadir(Hijo1);

											nuevo.linea = this._$.first_line;
											nuevo.columna = this._$.first_column;

											contador = contador + 1;
											var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
											GraficasDOT.anadir(Hijo2);

											var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
											GraficasDOT.anadir(Conexion1x);

											var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
											GraficasDOT.anadir(Conexion1x);


											this.$ = nuevo.Ejecutar(Entorno1);
break;
case 94: case 129:
 
										this.$ = $$[$0-1];  

										//nuevo.linea = this._$.first_line;
										//nuevo.columna = this._$.first_column;
										//console.log("DUA LIPA");
									
break;
case 95:

		var nuevo = new AccesoV("ACCEDER");
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		var Arreglo = new Nodo($$[$0-3]);
		nuevo.Hijos[0] = Arreglo;
		nuevo.Hijos[1] = $$[$0-1];
		/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "Elemento_Vector" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador = contador + 1;
		var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + "INDICE" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo3);


		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		var Conexion1x = "node_" + (contador - 1)+ "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		/*fin Grafica*/
		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 96:

			var nuevo = new Nodo("LINEAR");
			var Vector = new Nodo($$[$0-3]);
			nuevo.Hijos[0] = Vector;
			nuevo.TipoDato = "VectorRomeo";

			/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "LINEALIZAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);



		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		
		/*fin Grafica*/



			this.$ = nuevo;
	
break;
case 97:

			var nuevo = new LineaVector("LINEAR");
			var Vector = new Nodo($$[$0-1]);
			nuevo.Hijos[0] = Vector;
			nuevo.TipoDato = "VectorRomeo";


					/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "LARGO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);



		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		
		/*fin Grafica*/

			this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 98:

		var nuevo = new LargoID("LINEAR");
		var Vector = new Nodo($$[$0-1]);
		nuevo.Hijos[0] = Vector;
		nuevo.TipoDato = "VectorRomeoxd";

							/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "LARGO2" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);



		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		
		/*fin Grafica*/

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 99:

		var nuevo = new Mayusculas("LINEAR");
		var Vector = new Nodo($$[$0-1]);
		nuevo.Hijos[0] = Vector;
		nuevo.TipoDato = "VectorRomeoxd";

		/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "MAYUSCULAS" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);



		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		
		/*fin Grafica*/


		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 100:

		var nuevo = new Minusculas("LINEAR");
		var Vector = new Nodo($$[$0-1]);
		nuevo.Hijos[0] = Vector;
		nuevo.TipoDato = "VectorRomeoxd";

		/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "MINUSCULAS" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);



		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		
		/*fin Grafica*/

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 101:

		var nuevo = new UnCaracter("LINEAR");
		var Vector = new Nodo($$[$0-3]);
		nuevo.Hijos[0] = Vector;
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.TipoDato = "VectorRomeoxd";

		/*GRafica*/
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "UN_CARACTER" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);



		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-2] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador - 1) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador) + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);
		
		
		/*fin Grafica*/



		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 102:


				var nuevo = new Nodo("ID");
				var nuevovalor = new Nodo($$[$0-1]);
				nuevo.Hijos[0] = nuevovalor;
				nuevo.TipoDato = "ID";
				nuevo.CadenaDe3D = $$[$0-1];

				var nuevoX = new Nodo("Entero");
				var nuevovalorX = new Nodo("0");
				nuevoX.Hijos[0] = nuevovalorX;
				nuevoX.TipoDato = "Entero";
				nuevoX.CadenaDe3D = "0";


				var nuevoy = new Aritmetica2("Aritmetica");
				var operador = new Nodo("+");
				
				nuevoy.Hijos[0] = nuevo;
				nuevoy.Hijos[1] = operador;
				nuevoy.Hijos[2] =  nuevoX;

				nuevoy.linea = this._$.first_line;
				nuevoy.columna = this._$.first_column;
				
				var nuevoyx =  nuevoy.Ejecutar(Entorno1);
				nuevoy.Ejecutar(Entorno1);
				var nuevoDEC = new DECREMENTO2("WHILE");
				var variable = new Nodo($$[$0-1]);
				nuevoDEC.Hijos[0] = variable;
				var simbolo = new Nodo("+");
				nuevoDEC.Hijos[1] = simbolo;
				nuevoDEC.Ejecutar(Entorno1);
				nuevoyx.MiCadena = nuevoyx.MiCadena +  nuevoDEC.MiCadena;
				this.$ = nuevoyx;
				
	
break;
case 103:

		var nuevo = new Nodo("ID");
				var nuevovalor = new Nodo($$[$0-1]);
				nuevo.Hijos[0] = nuevovalor;
				nuevo.TipoDato = "ID";
				nuevo.CadenaDe3D = $$[$0-1];

				var nuevoX = new Nodo("Entero");
				var nuevovalorX = new Nodo("0");
				nuevoX.Hijos[0] = nuevovalorX;
				nuevoX.TipoDato = "Entero";
				nuevoX.CadenaDe3D = "0";


				var nuevoy = new Aritmetica2("Aritmetica");
				var operador = new Nodo("-");
				
				nuevoy.Hijos[0] = nuevo;
				nuevoy.Hijos[1] = operador;
				nuevoy.Hijos[2] =  nuevoX;

				nuevoy.linea = this._$.first_line;
				nuevoy.columna = this._$.first_column;

				//this.$ =  nuevoy.Ejecutar(Entorno1);
				var nuevoyx = nuevoy.Ejecutar(Entorno1);
				var nuevoDEC = new DECREMENTO2("WHILE");
				var variable = new Nodo($$[$0-1]);
				nuevoDEC.Hijos[0] = variable;
				var simbolo = new Nodo("-");
				nuevoDEC.Hijos[1] = simbolo;
				nuevoDEC.Ejecutar(Entorno1);
				nuevoyx.MiCadena = nuevoyx.MiCadena +  nuevoDEC.MiCadena;
				this.$ = nuevoyx;

				
	
break;
case 104:
 
										//this.$ = $$[$0] *-1;
										//var nuevo = Nodo("Hola");
										//this.$ = nuevo;
										//console.log("DUA LIPA");
										//this.$ = $$[$0-1] * $$[$01]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo("*");

										var nuevo2 = new Nodo("Entero");
										var nuevovalor2 = new Nodo("-1");
										nuevo2.Hijos[0] = nuevovalor2;
										nuevo2.TipoDato = "Entero";
										nuevo2.CadenaDe3D = "-1";

										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] =  nuevo2;
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 105:
 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										nuevo.TipoDato = "Booleano";
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 106:
 
										//this.$ = $$[$0-2] + $$[$0];										
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										
										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
										
									
break;
case 107:
 
										//this.$ = $$[$0-2] - $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 108:
 
										//this.$ = $$[$0-2] * $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 109:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 110:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 111:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 112: case 113: case 114: case 117:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 115: case 116:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	


										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 118: case 119: case 120:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
										
break;
}
},
table: [{2:[1,4],3:1,4:2,8:3,9:5,10:$V0,17:6,22:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},{1:[3]},{5:[1,14],8:15,9:5,10:$V0,17:6,22:$V1,26:$V2,27:$V3,28:$V4,29:$V5,30:$V6},o($V7,[2,5]),o($V7,[2,6]),{10:[1,16]},{10:$V8,18:17},{23:19,25:[1,20]},{10:[2,17]},{10:[2,18]},{10:[2,13]},{10:[2,14]},{10:[2,15]},{10:[2,16]},{1:[2,1]},o($V7,[2,4]),{10:[1,21]},{19:[1,22],20:[1,23],24:$V9},o($Va,[2,59]),o($V7,$Vb,{6:25,7:$Vc,24:[1,26]}),o($Vd,[2,12]),{11:[1,28]},{20:[1,29]},{10:$Ve,11:$Vf,21:30,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:[1,41]},o($V7,[2,10]),{25:[1,42]},o([5,10,16,22,26,27,28,29,30,32,35,36,40,42,43,45,51,54],[2,2]),o($Vo,[2,21],{12:43,10:[1,44]}),{10:$Ve,11:$Vf,21:45,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($V7,$Vb,{6:46,7:$Vc,56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VE,[2,92],{11:[1,64],46:[1,62],47:[1,63],48:[1,65],78:[1,66],79:[1,67],80:[1,68],81:[1,69],82:[1,70],83:[1,71]}),{10:$Ve,11:$Vf,21:72,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:73,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VE,[2,86]),o($VE,[2,87]),o($VE,[2,88]),o($VE,[2,89]),o($VE,[2,90]),o($VE,[2,91]),{10:$Ve,11:$Vf,21:74,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($Va,[2,58]),o($Vd,[2,11]),{13:[1,75],24:[1,76]},{10:[1,77]},o($V7,$Vb,{6:78,7:$Vc,56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V7,[2,9]),{10:$Ve,11:$Vf,21:79,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:80,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:81,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:82,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:83,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:84,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:85,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:86,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:87,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:88,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:89,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:90,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:91,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:92,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$Ve,11:$Vf,21:93,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VE,[2,67]),o($VE,[2,68]),o($Vo,[2,66],{55:94,21:95,10:$Ve,11:$Vf,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn}),{10:$Ve,11:$Vf,21:96,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{11:[1,97]},o($VE,[2,97]),o($VE,[2,98]),o($VE,[2,99]),o($VE,[2,100]),{10:$Ve,11:$Vf,21:98,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VE,[2,69]),o($VE,[2,70]),{13:[1,99],56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{14:[1,100]},{10:[1,101]},o($Vo,[2,20]),o($V7,[2,8]),o($VF,[2,71],{59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VF,[2,72],{59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VG,[2,73],{61:$Vt}),o($VG,[2,74],{61:$Vt}),o($VE,[2,75]),o($VG,[2,76],{61:$Vt}),o($VH,[2,77],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VH,[2,78],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VH,[2,79],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VH,[2,80],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu}),o($VI,[2,81],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,70:$VC,71:$VD}),o($VI,[2,82],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,70:$VC,71:$VD}),o($VI,[2,83],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,70:$VC,71:$VD}),o($VJ,[2,84],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),o($VJ,[2,85],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy}),{13:[1,102],24:[1,103]},o($Vo,[2,65],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{49:[1,104],56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{13:[1,105]},{13:[1,106],56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},o($VE,[2,94]),{10:$VK,15:107,26:$VL,27:$VM,28:$VN,31:108,32:$VO,34:111,35:$VP,36:$VQ,40:$VR,42:$VS,43:$VT},{10:[1,120]},o($VE,[2,93]),{10:$Ve,11:$Vf,21:121,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VE,[2,95]),o($VE,[2,96]),o($VE,[2,101]),{10:$VK,16:[1,122],26:$VL,27:$VM,28:$VN,31:123,32:$VO,34:111,35:$VP,36:$VQ,40:$VR,42:$VS,43:$VT},o($VU,[2,23]),{11:[1,124]},{10:[2,63],11:[1,125],20:[1,126],46:[1,127],47:[1,128],48:[1,129]},{10:$V8,18:130},{10:$Ve,11:$Vf,21:131,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{11:[1,132]},{11:[1,133]},{14:[1,134]},{11:[1,135]},{10:[2,60]},{10:[2,61]},{10:[2,62]},o($Vo,[2,19]),o($Vo,[2,64],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($V7,[2,7]),o($VU,[2,22]),{10:$Ve,11:$Vf,21:136,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($Vo,$VV,{33:137,21:138,10:$Ve,11:$Vf,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn}),{10:$Ve,11:$Vf,21:139,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VU,$Vb,{6:140,7:$Vc}),o($VU,$Vb,{6:141,7:$Vc}),{49:[1,142]},o($VU,$Vb,{6:145,7:$Vc,19:[1,143],20:[1,144],24:$V9}),o($VU,$Vb,{6:146,7:$Vc,56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{10:$Ve,11:$Vf,21:147,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{10:$VW,11:$VX,41:148,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$V41,32:$V51,37:159,53:160,54:$V61},{10:$VW,11:$VX,41:164,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{13:[1,165],56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{13:[1,166],24:$V71},o($V81,[2,56],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VU,$Vb,{6:168,7:$Vc,56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VU,[2,39]),o($VU,[2,40]),{10:$V8,18:169},{20:[1,170]},{10:$Ve,11:$Vf,21:171,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VU,[2,28]),o($VU,[2,30]),{13:[1,172],56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD},{13:[1,173],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},o($Vo1,[2,127],{11:[1,191],46:[1,189],47:[1,190]}),{10:$VW,11:$VX,41:192,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:193,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},o($Vo1,[2,121]),o($Vo1,[2,122]),o($Vo1,[2,123]),o($Vo1,[2,124]),o($Vo1,[2,125]),o($Vo1,[2,126]),{10:$VW,11:$VX,41:194,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$V41,16:[1,195],32:$V51,53:196,54:$V61},o($Vp1,[2,49]),{11:[1,197]},{20:[1,198],46:[1,199],47:[1,200]},o($Vp1,$Vb,{6:201,7:$Vc}),{13:[1,202],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},o($VU,$Vb,{6:203,7:$Vc}),o($VU,$Vb,{6:204,7:$Vc}),{10:$Ve,11:$Vf,21:205,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VU,[2,29]),{20:[1,206],24:$V9},{10:$Ve,11:$Vf,21:207,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VU,$Vb,{6:208,7:$Vc,56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{14:[1,209]},{14:[1,210]},{10:$VW,11:$VX,41:211,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:212,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:213,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:214,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:215,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:216,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:217,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:218,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:219,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:220,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:221,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:222,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:223,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:224,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:225,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},o($Vo1,[2,102]),o($Vo1,[2,103]),{84:[1,226]},o($Vo1,[2,104]),o($Vo1,[2,105]),{13:[1,227],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},{40:[1,228]},o($Vp1,[2,48]),{10:$VW,11:$VX,41:229,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$VW,11:$VX,41:230,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},o($Vp1,$Vb,{6:231,7:$Vc}),o($Vp1,$Vb,{6:232,7:$Vc}),o($Vp1,[2,52]),{14:[1,233]},o($VU,[2,24]),o($VU,[2,25]),o($V81,[2,55],{56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),{10:[1,235],14:[1,234]},o($VU,$Vb,{6:236,7:$Vc,56:$Vp,58:$Vq,59:$Vr,60:$Vs,61:$Vt,62:$Vu,63:$Vv,64:$Vw,65:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD}),o($VU,[2,27]),{10:$V41,32:$V51,37:237,53:160,54:$V61},{10:$V41,32:$V51,37:238,53:160,54:$V61},o($Vq1,[2,106],{59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vq1,[2,107],{59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vr1,[2,108],{61:$Vd1}),o($Vr1,[2,109],{61:$Vd1}),o($Vo1,[2,110]),o($Vr1,[2,111],{61:$Vd1}),o($Vs1,[2,112],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vs1,[2,113],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vs1,[2,114],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vs1,[2,115],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1}),o($Vt1,[2,116],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,70:$Vm1,71:$Vn1}),o($Vt1,[2,117],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,70:$Vm1,71:$Vn1}),o($Vt1,[2,118],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,70:$Vm1,71:$Vn1}),o($Vu1,[2,119],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1}),o($Vu1,[2,120],{56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1}),{13:[1,239]},o($Vo1,[2,129]),{11:[1,240]},{13:[1,241],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},o($Vp1,$Vb,{6:242,7:$Vc,56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1}),o($Vp1,[2,53]),o($Vp1,[2,54]),{44:243,51:[1,244]},o([16,24],$VV,{21:138,33:245,10:$Ve,11:$Vf,56:$Vg,57:$Vh,72:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn}),{50:[1,246]},o($VU,[2,26]),{10:$V41,16:[1,247],32:$V51,53:196,54:$V61},{10:$V41,16:[1,248],32:$V51,53:196,54:$V61},o($Vo1,[2,128]),{10:$VW,11:$VX,41:249,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},o($Vp1,$Vb,{6:250,7:$Vc}),o($Vp1,[2,51]),{16:[1,251],45:[1,252],51:[1,253]},{10:$VW,11:$VX,41:254,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{16:[1,255],24:$V71},o($VU,$Vb,{6:256,7:$Vc}),o($VU,[2,34],{38:257,39:258,52:[1,259]}),o($VU,[2,35]),{13:[1,260],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},o($Vp1,[2,50]),o($VU,[2,37]),{19:[1,261]},{10:$VW,11:$VX,41:262,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{19:[1,263],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},o($VU,$Vb,{6:264,7:$Vc}),o($VU,[2,42]),o($VU,[2,32],{39:265,52:[1,266]}),o($VU,[2,33]),{14:$Vv1,36:[1,267]},{7:[1,269]},{10:$V41,32:$V51,37:270,53:160,54:$V61},{19:[1,271],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},{10:$V41,32:$V51,37:272,53:160,54:$V61},o($VU,[2,41]),o($VU,[2,31]),{14:$Vv1,36:[1,273]},{11:[1,274]},{10:$V41,32:$V51,37:275,53:160,54:$V61},o($VU,[2,36]),{10:$V41,16:[1,276],32:$V51,53:196,54:$V61},{10:$V41,32:$V51,37:277,53:160,54:$V61},o($Vw1,[2,44],{53:196,10:$V41,32:$V51,54:$V61}),{11:[1,278]},{10:$VW,11:$VX,41:279,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{10:$V41,16:[1,280],32:$V51,53:196,54:$V61},o($VU,[2,38]),o($Vw1,[2,43],{53:196,10:$V41,32:$V51,54:$V61}),{10:$VW,11:$VX,41:281,56:$VY,57:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21,77:$V31},{13:[1,282],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},o($VU,[2,45]),{13:[1,283],56:$V91,58:$Va1,59:$Vb1,60:$Vc1,61:$Vd1,62:$Ve1,63:$Vf1,64:$Vg1,65:$Vh1,66:$Vi1,67:$Vj1,68:$Vk1,69:$Vl1,70:$Vm1,71:$Vn1},{14:[1,284]},{14:[1,285]},{10:$V41,32:$V51,37:286,53:160,54:$V61},{10:$V41,32:$V51,37:287,53:160,54:$V61},{10:$V41,16:[1,288],32:$V51,53:196,54:$V61},{10:$V41,16:[1,289],32:$V51,53:196,54:$V61},o($Vx1,[2,47]),o($Vx1,[2,46])],
defaultActions: {8:[2,17],9:[2,18],10:[2,13],11:[2,14],12:[2,15],13:[2,16],14:[2,1],117:[2,60],118:[2,61],119:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var respuesta = "";
	var Entorno1 = new Casa();
	var GraficasDOT = new Graficas();
	var contador = 0;
	
	
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 32;
break;
case 3:return 7;
break;
case 4:return 46;
break;
case 5:return 47;
break;
case 6:return 11;
break;
case 7:return 13;
break;
case 8:return 48;
break;
case 9:return 49;
break;
case 10:return 14;
break;
case 11:return 16;
break;
case 12:return 24;
break;
case 13:return 58;
break;
case 14:return 56;
break;
case 15:return 59;
break;
case 16:return 60;
break;
case 17:return 61;
break;
case 18:return 62;
break;
case 19:return 66;
break;
case 20:return 65;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 70;
break;
case 24:return 71;
break;
case 25:return 67;
break;
case 26:return 68;
break;
case 27:return 69;
break;
case 28:return 57;
break;
case 29:return 75;
break;
case 30:return 76;
break;
case 31:return 29;
break;
case 32:return 30;
break;
case 33:return 26;
break;
case 34:return 27;
break;
case 35:return 28;
break;
case 36:return 35;
break;
case 37:return 19;
break;
case 38:return 20;
break;
case 39:return "ELIF";
break;
case 40:return "ELELSE";
break;
case 41:return "ELWHILE";
break;
case 42:return "ELDO";
break;
case 43:return "BIFURCACION";
break;
case 44:return "CASO";
break;
case 45:return "DEFECTO";
break;
case 46:return "EL_BREAK";
break;
case 47:return "IMPORTAR";
break;
case 48:return "LINEALIZAR";
break;
case 49:return "LARGO2";
break;
case 50:return "LARGO";
break;
case 51:return "MAYUSCULAS";
break;
case 52:return "MINUSCULAS";
break;
case 53:return "UNCARACTER";
break;
case 54:return "ARREGLOxD";
break;
case 55:
break;
case 56:
break;
case 57:return 73;
break;
case 58:return 72;
break;
case 59:return "CARACTER";
break;
case 60:return "CADENA";
break;
case 61:return "ARCHIVO";
break;
case 62:return "ID";
break;
case 63:return 5;
break;
case 64: 
					alert('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
       					console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
					Entorno1.LosErrores +="<tr>";
					Entorno1.LosErrores += "<td>" + "Sintáctico" + "  </td>" ;
					Entorno1.LosErrores += "<td>" + "Caracter no perteneciente" + yy_.yytext + " </td>";
					Entorno1.LosErrores += "<td>" + yy_.yylloc.first_line  + "</td>";
					Entorno1.LosErrores += "<td>" + yy_.yylloc.first_column+ "</td>";
					Entorno1.LosErrores += "</tr>";	   
					
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:print\b)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:return\b)/i,/^(?::)/i,/^(?:=)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:import\b)/i,/^(?:\.linealize\b)/i,/^(?:\.length\(\))/i,/^(?:\.length\b)/i,/^(?:\.toUpperCase\(\))/i,/^(?:\.toLowerCase\(\))/i,/^(?:\.charAt\()/i,/^(?:\.toCharArray\(\))/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:('[a-zA-Z0-9_]'))/i,/^(?:"([^\\\"]|\\"|\\t|\\n|\\r|\\)*")/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*["."][j])/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}