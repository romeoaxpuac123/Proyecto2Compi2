/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,7],$V5=[1,8],$V6=[5,10,22,23,24,25,26],$V7=[1,17],$V8=[1,20],$V9=[7,10,16,19,22,23,24,27,29,32,33,37,39],$Va=[13,27],$Vb=[1,35],$Vc=[1,36],$Vd=[1,27],$Ve=[1,28],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[2,3],$Vm=[1,56],$Vn=[1,42],$Vo=[1,41],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,51],$Vy=[1,52],$Vz=[1,53],$VA=[1,54],$VB=[1,55],$VC=[5,7,10,13,16,22,23,24,25,26,27,29,32,33,37,39,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58],$VD=[1,84],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,83],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[5,7,10,13,16,22,23,24,25,26,27,29,32,33,37,39,43,45,50,51,52,53,54,55,56,57,58],$VN=[5,7,10,13,16,22,23,24,25,26,27,29,32,33,37,39,43,45,46,47,49,50,51,52,53,54,55,56,57,58],$VO=[5,7,10,13,16,22,23,24,25,26,27,29,32,33,37,39,50,51,52,53,54,55,56,57,58],$VP=[5,7,10,13,16,22,23,24,25,26,27,29,32,33,37,39,54,55,56],$VQ=[5,7,10,13,16,22,23,24,25,26,27,29,32,33,37,39,54,55,56,57,58],$VR=[10,16,22,23,24,29,32,33,37,39],$VS=[1,124],$VT=[1,125],$VU=[1,116],$VV=[1,117],$VW=[1,118],$VX=[1,119],$VY=[1,120],$VZ=[1,121],$V_=[1,122],$V$=[1,123],$V01=[1,129],$V11=[1,128],$V21=[1,138],$V31=[1,137],$V41=[1,139],$V51=[1,140],$V61=[1,141],$V71=[1,142],$V81=[1,143],$V91=[1,144],$Va1=[1,145],$Vb1=[1,146],$Vc1=[1,147],$Vd1=[1,148],$Ve1=[1,149],$Vf1=[1,150],$Vg1=[1,151],$Vh1=[7,10,13,16,29,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58],$Vi1=[10,16,29],$Vj1=[7,10,13,16,29,43,45,50,51,52,53,54,55,56,57,58],$Vk1=[7,10,13,16,29,43,45,46,47,49,50,51,52,53,54,55,56,57,58],$Vl1=[7,10,13,16,29,50,51,52,53,54,55,56,57,58],$Vm1=[7,10,13,16,29,54,55,56],$Vn1=[7,10,13,16,29,54,55,56,57,58],$Vo1=[1,204],$Vp1=[10,16,22,23,24,29,32,33,37,39,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"PTCOMA":6,"PTyCOMA":7,"instruccion":8,"VISIBILIDAD":9,"ID":10,"PARIZQ":11,"lista_Parametros":12,"PARDER":13,"LLAVIZQ":14,"lista_instrucciones":15,"LLAVDER":16,"TIPOS2":17,"ID_LISTA":18,"DOSP":19,"IGUAL":20,"expresion":21,"VAR":22,"CONST":23,"GLOBAL":24,"PUBLIC":25,"PRIVATE":26,"COMA":27,"instruccion2":28,"IMPRMIR":29,"lista_Expresiones":30,"TIPOS":31,"RETORNO":32,"ELIF":33,"lista_instrucciones3":34,"LISTA_ELSE":35,"EL_COSOELSE":36,"ELWHILE":37,"expresion2":38,"ELDO":39,"ELELSE":40,"instruccion3":41,"lista_Expresiones2":42,"MENOS":43,"NOT":44,"MAS":45,"POR":46,"DIVIDIDO":47,"POTENCIA":48,"MODULO":49,"MAYOR":50,"MENOR":51,"MENORIGUAL":52,"MAYORIGUAL":53,"AND":54,"OR":55,"XOR":56,"IGUALDAD":57,"DESIGUALDAD":58,"ENTERO":59,"DECIMAL":60,"CARACTER":61,"VERDADERO":62,"FALSO":63,"CADENA":64,"lista_expresion2es2":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTyCOMA",10:"ID",11:"PARIZQ",13:"PARDER",14:"LLAVIZQ",16:"LLAVDER",19:"DOSP",20:"IGUAL",22:"VAR",23:"CONST",24:"GLOBAL",25:"PUBLIC",26:"PRIVATE",27:"COMA",29:"IMPRMIR",32:"RETORNO",33:"ELIF",37:"ELWHILE",39:"ELDO",40:"ELELSE",43:"MENOS",44:"NOT",45:"MAS",46:"POR",47:"DIVIDIDO",48:"POTENCIA",49:"MODULO",50:"MAYOR",51:"MENOR",52:"MENORIGUAL",53:"MAYORIGUAL",54:"AND",55:"OR",56:"XOR",57:"IGUALDAD",58:"DESIGUALDAD",59:"ENTERO",60:"DECIMAL",61:"CARACTER",62:"VERDADERO",63:"FALSO",64:"CADENA",65:"lista_expresion2es2"},
productions_: [0,[3,2],[6,1],[6,0],[4,2],[4,1],[4,1],[8,9],[8,6],[17,1],[17,1],[17,1],[17,1],[9,1],[9,1],[12,4],[12,2],[12,0],[15,2],[15,1],[28,5],[28,5],[28,6],[28,3],[28,4],[28,3],[28,9],[28,8],[28,8],[28,7],[28,7],[28,9],[36,4],[35,9],[35,8],[34,2],[34,1],[41,5],[41,4],[30,3],[30,1],[30,0],[18,3],[18,1],[31,1],[31,1],[31,1],[31,1],[42,3],[42,1],[42,0],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,4],[21,3],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,4],[38,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			document.getElementById("Reporte_Errores").innerHTML = "";
			var ReporteErrores = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Dando estilo a tablas</title>";
			ReporteErrores += "<link rel=\"stylesheet\" type=\"text/css\" href=\"tablas.css\"></head><body><div id=\"main-container\">";
			ReporteErrores += "<table><thead><tr><th>TIPO</th><th>DESCRIPCION</th><th>LINEA</th><th>COLUMNA</th></tr></thead>";

			ReporteErrores += Entorno1.LosErrores;
			ReporteErrores += "</table></div></body></html>"

			document.getElementById("Reporte_Errores").innerHTML = ReporteErrores;

			var nuevo = new Nodo("INICIO");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "INICIO" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
		
			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);


		//Vamos a mostra tooodos los cosos
		var Cadena_Inicio = "var ";
		for (var i = 1; i <= Entorno1.numero; i++) {
			if(i == Entorno1.numero){
				Cadena_Inicio = Cadena_Inicio + " t" + i + ";\n";
			}else{
				Cadena_Inicio = Cadena_Inicio + " t" + i + ",";
			}
			
		}
		if(Entorno1.numero == 0){
			Cadena_Inicio = "";
		}
		Cadena_Inicio = Cadena_Inicio + "var Stack[]; \nvar Heap[];\nvar P = 0;\nvar H = 0;\n"
		//console.log("CIRUGIA->" + Cadena_Inicio);
		document.getElementById("texto1C3D").innerHTML = Cadena_Inicio + document.getElementById("texto1C3D").value;
		Entorno1.numero = 0;
		Entorno1.etiquetas = 0;

		console.log("RESULTADO CODIGO DOT");
		GraficasDOT.anadir("}");
		console.log(GraficasDOT.ResultCadena());
		console.log("fin DOT");
		document.getElementById("numero1x").innerHTML = GraficasDOT.ResultCadena();
		GraficasDOT.Renovar();
		Entorno1.direccion = "";
		Entorno1.SIMBOLOS.splice(0, Entorno1.SIMBOLOS.length);
		Entorno1.TipoVariablesFUNCIONGLOBAL.splice(0, Entorno1.TipoVariablesFUNCIONGLOBAL.length);
        Entorno1.VariableVariablesFUNCIONGLOBAL.splice(0, Entorno1.VariableVariablesFUNCIONGLOBAL.length);
        Entorno1.TesVariablesFUNCIONGLOBAL.splice(0,Entorno1.TesVariablesFUNCIONGLOBAL.length);
	
break;
case 4:

			

			var nuevo = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var nuevo2 = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	Entorno1.direccion = ""; 

			this.$ = nuevo2;
			
	
break;
case 5:

			var nuevo = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var nuevo2 = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);
			document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	Entorno1.direccion = ""; 
			this.$ = nuevo2;
	
break;
case 6:

		alert('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
        console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
		Entorno1.LosErrores +="<tr>";
		Entorno1.LosErrores += "<td>" + "sintáctico" + "  </td>" ;
		Entorno1.LosErrores += "<td>" +  "Expresion incorrecta"  + " </td>";
		Entorno1.LosErrores += "<td>" + this._$.first_line  + "</td>";
		Entorno1.LosErrores += "<td>" + this._$.first_column + "</td>";
		Entorno1.LosErrores += "</tr>";

		
break;
case 7:

				Entorno1.nombreentorno = $$[$0-6];
				var nuevo = new Funciones("Funciones");
				var NombreFuncion = new Nodo($$[$0-6]);
				nuevo.Hijos[0] = NombreFuncion;
				nuevo.TipoDato = $$[$0-7];
				contador = contador + 1;
				nuevo.NumeroDeNodo = contador;

				nuevo.linea = this._$.first_line;
				nuevo.columna = this._$.first_column;

				var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_FUNCION" + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				

				
				contador = contador + 1;
				var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-6] + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo3);

				var Conexion2 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
				GraficasDOT.anadir(Conexion2);

				var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
				GraficasDOT.anadir(Conexion1);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
				GraficasDOT.anadir(Conexion3);


				this.$ =  nuevo.Ejecutar(Entorno1); 
break;
case 8:

		
		console.log("DEC1 globales");
		var nuevo = new VariablesGlobales("VARIABLES");
		//var Tipo = new Nodo($$[$0-5]);
		nuevo.Hijos[0] = $$[$0-5];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

		var Conexion1xZx = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZx);

		this.$ = nuevo.Ejecutar(Entorno1);
			
	
break;
case 9: case 44:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "VAR" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 10: case 45:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "CONST" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 11: case 46:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "GLOBAL" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 12: case 47:

			var nuevo = new Nodo($$[$0]);
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 15:

			//Entorno1.tamanioentorno += 1;
			var nuevo = new Parametros ("PARAMETROS");
			var nuevovalor2 = new Nodo($$[$0]);
			nuevo.Hijos[0] = nuevovalor2;
		    nuevo.TipoDato = $$[$0-1];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			contador = contador + 1;
			var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo3);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1)+ "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" +  contador + "\n";
			GraficasDOT.anadir(Conexion2);
			//nuevo.Ejecutar(Entorno1);
			

			var nuevo2 = new Parametros ("PARAMETROS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo1x = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "LISTA_PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1x);
			
			var Conexion2X = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" +  nuevo.NumeroDeNodo+ "\n";
			GraficasDOT.anadir(Conexion2X);
			
			var Conexion2XX = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" +  $$[$0-3].NumeroDeNodo+ "\n";
			GraficasDOT.anadir(Conexion2XX);
			nuevo.Ejecutar(Entorno1);

			
			this.$ =  nuevo2;
	
break;
case 16:

			//Entorno1.numero += 1;
			//Entorno1.valordep = Entorno1.numero += 1;
			//Entorno1.tamanioentorno += 1;
			var nuevo = new Parametros ("PARAMETROS");
			var nuevovalor2 = new Nodo($$[$0]);
			nuevo.Hijos[0] = nuevovalor2;
		    nuevo.TipoDato = $$[$0-1];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			contador = contador + 1;
			var Hijo3 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo3);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + (contador-1)+ "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" +  contador + "\n";
			GraficasDOT.anadir(Conexion2);
			nuevo.Ejecutar(Entorno1);
			//this.$ =  nuevo.Ejecutar(Entorno1);
			var nuevop = new Parametros ("LISTA_PARAMETROS");
			contador = contador + 1;
			nuevop.NumeroDeNodo =  contador;

			var Hijo1x = "node_"+ nuevop.NumeroDeNodo + "[shape=circle label=\"" + "LISTA_PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1x);

			var Conexion1x = "node_" + nuevop.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo+ "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevop;
			
	
break;
case 17:
	     //Entorno1.valordep = Entorno1.numero += 1;
			//Entorno1.tamanioentorno += 1;
			var nuevo = new Nodo ("PARAMETROS");
			
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			//Entorno1.valordep = Entorno1.numero += 1;
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SIN_PARAMETROS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
		
break;
case 18:

		
			var nuevo = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var nuevo2 = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	//Entorno1.direccion = ""; 

			this.$ = nuevo2;
	
break;
case 19:

		var nuevo = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var nuevo2 = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);
			//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	//Entorno1.direccion = ""; 
			this.$ = nuevo2;
		console.log("hola lista2");
	
break;
case 20:

		console.log("PASO POR IMPRIMIR");
		//console.log('El valor de la expresión es: ' + $$[$0-2].Nombre);
		//respuesta = respuesta + '->' + $$[$0-2].Ejecutar() + "\n";
        //document.getElementById("salida").innerHTML = respuesta;
		var nuevo = new Imprimir("Imprimir");
		nuevo.Hijos[0] = $$[$0-2];
		nuevo.Ejecutar(Entorno1);
		
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IMP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo1);	

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + "EXP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo2);	

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion2 = "node_" + contador + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion2);
		//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +entorno.direccion + "\n";
        //entorno.direccion = ""; 
		this.$ = nuevo;
	
break;
case 21:

		//llamada de funcion principal();
				var nuevo = new LLamadas("LLamada");
				var NombreFuncion = new Nodo($$[$0-4]);
				nuevo.Hijos[0] = NombreFuncion;
				contador = contador + 1;
				nuevo.NumeroDeNodo = contador;
				
				nuevo.linea = this._$.first_line;
				nuevo.columna = this._$.first_column;
				
				
				var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "LLAMADA_FUNCION" + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo1);

				contador = contador + 1;
				var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-4] + "\"]" +"\n";									
				GraficasDOT.anadir(Hijo2);	

				var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
				GraficasDOT.anadir(Conexion1);

				var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
				GraficasDOT.anadir(Conexion1xZ);
				

				this.$ =  nuevo.Ejecutar(Entorno1);

	
break;
case 22:

		console.log("DEC1");
		var nuevo = new Variables ("VARIABLES");
		//var Tipo = new Nodo($$[$0-5]);
		nuevo.Hijos[0] = $$[$0-5];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

		var Conexion1xZx = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZx);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 23:

		var nuevo = new Variables2 ("VARIABLES");
		//var Tipo = new Nodo($$[$0-2]);
		nuevo.Hijos[0] = $$[$0-2];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
			

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "DEC_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xZ = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xZ);

	

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 24:

		var nuevo = new ModificarVariables ("VARIABLES");
		var identificador = new Nodo($$[$0-3]);
		nuevo.Hijos[0] = identificador;
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "MOD_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 25:

		var nuevo = new Retorno("RETORNO"); 
        nuevo.Hijos[0] = $$[$0-1];

		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "RETORNO" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 26:

		//IFELSEIFELSE
		//if muchs if elses
		Entorno1.direccionIF = "";
		var nuevo = new IFELSEIFELSE("IF");
		nuevo.TipoDato = $$[$0-8];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		nuevo.Hijos[0] = $$[$0-3];
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.Hijos[2] = $$[$0-6];
		nuevo.Hijos[3] = $$[$0];

		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-6].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-3].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3); 

		this.$ = nuevo.Ejecutar(Entorno1);

	
break;
case 27:

		//if muchs if elses
		Entorno1.direccionIF = "";
		var nuevo = new IfElseIF("IF");
		nuevo.TipoDato = $$[$0-7];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		nuevo.Hijos[0] = $$[$0-2];
		nuevo.Hijos[1] = $$[$0];
		nuevo.Hijos[2] = $$[$0-5];

		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

				var Conexion3 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 28:

		Entorno1.direccionIF = "";
		var nuevo = new IFELSE("IF");
		nuevo.TipoDato = $$[$0-7];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-5];
		nuevo.Hijos[1] = $$[$0-2];
		//nuevo.Hijos[1].ListaSentencias = $$[$0-2].ListaSentencias;
		nuevo.Hijos[2] = $$[$0];
		//nuevo.Hijos[2].ListaSentencias = $$[$0].ListaSentencias;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-5].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		var Conexion1xXY = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xXY);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 29:

		var nuevo = new EL_IF("IF");
		nuevo.TipoDato = $$[$0-6];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);

	
break;
case 30:

		var nuevo = new EL_WHILE("WHILE");
		nuevo.TipoDato = $$[$0-6];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "WHILE" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		var Conexion1xX = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1xX);

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 31:

		var nuevo = new DO_WHILE("WHILE");
		nuevo.TipoDato = $$[$0-8];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-6];
		nuevo.Hijos[1] = $$[$0-2];
		

		this.$ = nuevo.Ejecutar(Entorno1);
	
break;
case 32:

		Entorno1.direccionIF += "##ELSE\n";
		var nuevo = new ELSE("IF");
		nuevo.TipoDato = $$[$0-3];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		nuevo.Hijos[0] = $$[$0-1];
		nuevo.ListaSentencias = $$[$0-1].ListaSentencias;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "ELSE" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		

		this.$ = nuevo;
	
break;
case 33:

			var nuevo = new Nodo("ELSE_IF");
			//var Hijo2 = new Nodo("Nodo");
			//Hijo2.ListaSentencias = $$[$0-1].ListaSentencias;
			nuevo.Hijos[0] = $$[$0-4];
			nuevo.Hijos[1] = $$[$0-1];
			nuevo.MiCadena = $$[$0-4].MiCadena + $$[$0-1].MiCadena;
			var nuevo2 = new Nodo("ELSE_IF");
			nuevo2.ListaSentencias = $$[$0-8].ListaSentencias;
			nuevo2.ListaSentencias.push(nuevo);

			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "ELSE IF" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-8].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			this.$ = nuevo2;	
		
break;
case 34:

		var nuevo = new Nodo("ELSE_IF");
		//var Hijo2 = new Nodo("Nodo");
		nuevo.MiCadena = $$[$0-4].MiCadena + $$[$0-1].MiCadena;
		//Hijo2.ListaSentencias = $$[$0-1].ListaSentencias;
		nuevo.Hijos[0] = $$[$0-4];
		nuevo.Hijos[1] = $$[$0-1];

		var nuevo2 = new Nodo("ELSE_IF");
		nuevo2.ListaSentencias.push(nuevo);

		contador = contador + 1;
		nuevo2.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "ELSE IF" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-4].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

		var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion3);

		this.$ = nuevo2;	

	
break;
case 35:

		var nuevo = new Nodo("LS1");
		nuevo.ListaSentencias = $$[$0-1].ListaSentencias;
		nuevo.ListaSentencias.push($$[$0]);
		contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var nuevo2 = new Nodo("SENTENCIAS");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);

			var Conexion3 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion3);
			//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +Entorno1.direccion + "\n";
        	//Entorno1.direccion = ""; 
			nuevo.NumeroDeNodo = contador;
			this.$ = nuevo;
	
break;
case 36:

		var nuevo = new Nodo("LS1");
		nuevo.ListaSentencias.push($$[$0]);
		contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);


			var nuevo2 = new Nodo("SENTENCIA");
			contador = contador + 1;
			nuevo2.NumeroDeNodo = contador;
			var Hijo2 = "node_"+ nuevo2.NumeroDeNodo + "[shape=circle label=\"" + "SENTENCIAS" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);


			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion2 = "node_" + nuevo2.NumeroDeNodo + "->" + "node_" + nuevo.NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion2);
			nuevo.NumeroDeNodo = contador;
			this.$ = nuevo;
	
break;
case 37:

		
		console.log("PASO POR IMPRIMIR");
	
		var nuevo = new Imprimir2("Imprimir");
		nuevo.MiCadena = $$[$0-2].MiCadena;
		nuevo.Hijos[0] = $$[$0-2];
		
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;
		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "IMP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo1);	

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + "EXP" + "\"]" +"\n";									
        GraficasDOT.anadir(Hijo2);	

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion2 = "node_" + contador + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion2);
		//document.getElementById("texto1C3D").innerHTML = document.getElementById("texto1C3D").value +entorno.direccion + "\n";
        //entorno.direccion = ""; 
		this.$ = nuevo;
	
break;
case 38:

		var nuevo = new ModificarVariables2 ("VARIABLES");
		nuevo.MiCadena = $$[$0-1].MiCadena;
		var identificador = new Nodo($$[$0-3]);
		nuevo.Hijos[0] = identificador;
		nuevo.Hijos[1] = $$[$0-1];
		nuevo.linea = this._$.first_line;
		nuevo.columna = this._$.first_column;
		contador = contador + 1;
		nuevo.NumeroDeNodo = contador;

		var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "MOD_VAR" + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo1);

		contador = contador + 1;
		var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
		GraficasDOT.anadir(Hijo2);

		var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
		GraficasDOT.anadir(Conexion1);

		var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
		GraficasDOT.anadir(Conexion1x);

		this.$ = nuevo; //.Ejecutar(Entorno1);
	
break;
case 39:

			Entorno1.ListaParametrosFuncion.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0-2];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo;
	
break;
case 40:

			Entorno1.ListaParametrosFuncion.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			this.$ = nuevo;
	
break;
case 41: case 50:

			var nuevo = new Nodo ("lista_Expresiones");
			
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			//Entorno1.valordep = Entorno1.numero += 1;
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "SIN_EXPRESIONES" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			this.$ = nuevo;
	
break;
case 42:

		Entorno1.VariableVariables.push($$[$0]);
			var nuevo = new Nodo("ID_LISTA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "ID_LISTA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);
			
			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador+ "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo ;
	
break;
case 43:

			Entorno1.VariableVariables.push($$[$0]);
			var nuevo = new Nodo("ID_LISTA");
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			

			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "ID_LISTA" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);
			
			contador = contador + 1;
			var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo2);

			
			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador+ "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo ;

	
break;
case 48:

			Entorno1.ListaParametrosFuncion2.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0-2];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-2].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1x);

			this.$ = nuevo;
	
break;
case 49:

			Entorno1.ListaParametrosFuncion2.push($$[$0]);
			var nuevo = new Nodo("lista_Expresiones");
			
		    nuevo.TipoDato = $$[$0];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			
			contador = contador + 1;
			nuevo.NumeroDeNodo = contador;
			
			var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "lista_Expresiones" + "\"]" +"\n";									
			GraficasDOT.anadir(Hijo1);

			var Conexion1 = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0].NumeroDeNodo + "\n";
			GraficasDOT.anadir(Conexion1);

			this.$ = nuevo;
	
break;
case 51:
 
										//this.$ = $$[$0] *-1;
										//var nuevo = Nodo("Hola");
										//this.$ = nuevo;
										//console.log("DUA LIPA");
										//this.$ = $$[$0-1] * $$[$01]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo("*");

										var nuevo2 = new Nodo("Entero");
										var nuevovalor2 = new Nodo("-1");
										nuevo2.Hijos[0] = nuevovalor2;
										nuevo2.TipoDato = "Entero";
										nuevo2.CadenaDe3D = "-1";

										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] =  nuevo2;
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 52:
 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										nuevo.TipoDato = "Booleano";
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 53:
 
										//this.$ = $$[$0-2] + $$[$0];										
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										
										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
										
									
break;
case 54:
 
										//this.$ = $$[$0-2] - $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 55:
 
										//this.$ = $$[$0-2] * $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 56:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 57:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 58:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 59: case 60: case 61: case 64:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 62: case 63:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	


										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 65: case 66: case 67:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica("Aritmetica");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
										
break;
case 68: case 94:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Entero");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Entero";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);									

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ = nuevo;
										
									//	console.log("Leimos un Entero->" + $$[$0]);
									
break;
case 69: case 95:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Entero");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Decimal";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;	

										this.$ = nuevo;
									//	console.log("Leimos un Entero->" + $$[$0]);
									
break;
case 70: case 96:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Caracter");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Caracter";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0].replace("'","").replace("'","") + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ = nuevo;
										console.log("Leimos un Caracter->" + $$[$0]);
									
break;
case 71: case 72: case 97: case 98:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Booleano");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Booleano";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ = nuevo;
										console.log("Leimos un Booleano->" + $$[$0]);
									
break;
case 73: case 99:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("Cadena");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "Cadena";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0].replace("\"","").replace("\"","") + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ = nuevo;
										console.log("Leimos una cadena->" + $$[$0]);
										
									
break;
case 74: case 100:
 
										//this.$ = Number($$[$0]); 
										var nuevo = new Nodo("ID");
										var nuevovalor = new Nodo($$[$0]);
										nuevo.Hijos[0] = nuevovalor;
										nuevo.TipoDato = "ID";
										nuevo.CadenaDe3D = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0].replace("\"","").replace("\"","") + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ = nuevo;
										console.log("ID->" + $$[$0]);
										
									
break;
case 75: case 101:

											var nuevo = new Nodo("FuncionRetornoXD");
											var nuevovalor = new Nodo($$[$0-3]);
											nuevo.Hijos[0] = nuevovalor;
											nuevo.TipoDato = "Funcion";
											contador = contador + 1;
											nuevo.NumeroDeNodo = contador;
											var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + "Llamar_Funcion" + "\"]" +"\n";									
											GraficasDOT.anadir(Hijo1);

											nuevo.linea = this._$.first_line;
											nuevo.columna = this._$.first_column;

											contador = contador + 1;
											var Hijo2 = "node_"+ contador + "[shape=circle label=\"" + $$[$0-3] + "\"]" +"\n";									
											GraficasDOT.anadir(Hijo2);

											var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + contador + "\n";
											GraficasDOT.anadir(Conexion1x);

											var Conexion1x = "node_" + nuevo.NumeroDeNodo + "->" + "node_" + $$[$0-1].NumeroDeNodo + "\n";
											GraficasDOT.anadir(Conexion1x);


											this.$ = nuevo.Ejecutar(Entorno1);
break;
case 76: case 102:
 
										this.$ = $$[$0-1];  

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										//console.log("DUA LIPA");
									
break;
case 77:
 
										//this.$ = $$[$0] *-1;
										//var nuevo = Nodo("Hola");
										//this.$ = nuevo;
										//console.log("DUA LIPA");
										//this.$ = $$[$0-1] * $$[$01]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo("*");

										var nuevo2 = new Nodo("Entero");
										var nuevovalor2 = new Nodo("-1");
										nuevo2.Hijos[0] = nuevovalor2;
										nuevo2.TipoDato = "Entero";
										nuevo2.CadenaDe3D = "-1";

										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] =  nuevo2;
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 78:
 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										nuevo.TipoDato = "Booleano";
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 79:
 
										//this.$ = $$[$0-2] + $$[$0];										
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];
										
										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
										
									
break;
case 80:
 
										//this.$ = $$[$0-2] - $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 81:
 
										//this.$ = $$[$0-2] * $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 82:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	
										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 83:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;
										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 84:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
									
break;
case 85: case 86: case 87: case 90:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 88: case 89:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	


										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
								
break;
case 91: case 92: case 93:
 
										//this.$ = $$[$0-2] / $$[$0]; 
										var nuevo = new Aritmetica2("Aritmetica2");
										var operador = new Nodo($$[$0-1]);
										nuevo.Hijos[0] = $$[$0-2];
										nuevo.Hijos[1] = operador;
										nuevo.Hijos[2] = $$[$0];

										contador = contador + 1;
										nuevo.NumeroDeNodo = contador;
										var Hijo1 = "node_"+ nuevo.NumeroDeNodo + "[shape=circle label=\"" + $$[$0-1] + "\"]" +"\n";									
										GraficasDOT.anadir(Hijo1);	

										var Conexion1 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0-2].NumeroDeNodo + "\n";
										var Conexion2 = "node_"+ nuevo.NumeroDeNodo + "->" + "node_"+ $$[$0].NumeroDeNodo +"\n";
										GraficasDOT.anadir(Conexion1);	
										GraficasDOT.anadir(Conexion2);	

										nuevo.linea = this._$.first_line;
										nuevo.columna = this._$.first_column;

										this.$ =  nuevo.Ejecutar(Entorno1);
										
break;
}
},
table: [{2:[1,4],3:1,4:2,8:3,9:5,10:$V0,17:6,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},{1:[3]},{5:[1,13],8:14,9:5,10:$V0,17:6,22:$V1,23:$V2,24:$V3,25:$V4,26:$V5},o($V6,[2,5]),o($V6,[2,6]),{10:[1,15]},{10:$V7,18:16},{10:[2,13]},{10:[2,14]},{10:[2,9]},{10:[2,10]},{10:[2,11]},{10:[2,12]},{1:[2,1]},o($V6,[2,4]),{10:[1,18]},{19:[1,19],27:$V8},o($V9,[2,43]),{11:[1,21]},{20:[1,22]},{10:[1,23]},o($Va,[2,17],{12:24,10:[1,25]}),{10:$Vb,11:$Vc,21:26,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($V9,[2,42]),{13:[1,37],27:[1,38]},{10:[1,39]},o($V6,$Vl,{6:40,7:$Vm,43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{10:$Vb,11:$Vc,21:57,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:58,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($VC,[2,68]),o($VC,[2,69]),o($VC,[2,70]),o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),o($VC,[2,74],{11:[1,59]}),{10:$Vb,11:$Vc,21:60,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{14:[1,61]},{10:[1,62]},o($Va,[2,16]),o($V6,[2,8]),{10:$Vb,11:$Vc,21:63,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:64,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:65,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:66,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:67,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:68,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:69,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:70,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:71,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:72,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:73,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:74,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:75,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:76,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$Vb,11:$Vc,21:77,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o([5,10,16,22,23,24,25,26,29,32,33,37,39],[2,2]),o($VC,[2,51]),o($VC,[2,52]),o($Va,[2,50],{42:78,21:79,10:$Vb,11:$Vc,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk}),{13:[1,80],43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB},{10:$VD,15:81,22:$VE,23:$VF,24:$VG,28:82,29:$VH,31:85,32:$VI,33:$VJ,37:$VK,39:$VL},{10:[1,93]},o($VM,[2,53],{46:$Vp,47:$Vq,48:$Vr,49:$Vs}),o($VM,[2,54],{46:$Vp,47:$Vq,48:$Vr,49:$Vs}),o($VN,[2,55],{48:$Vr}),o($VN,[2,56],{48:$Vr}),o($VC,[2,57]),o($VN,[2,58],{48:$Vr}),o($VO,[2,59],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs}),o($VO,[2,60],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs}),o($VO,[2,61],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs}),o($VO,[2,62],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs}),o($VP,[2,63],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,57:$VA,58:$VB}),o($VP,[2,64],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,57:$VA,58:$VB}),o($VP,[2,65],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,57:$VA,58:$VB}),o($VQ,[2,66],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw}),o($VQ,[2,67],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw}),{13:[1,94],27:[1,95]},o($Va,[2,49],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($VC,[2,76]),{10:$VD,16:[1,96],22:$VE,23:$VF,24:$VG,28:97,29:$VH,31:85,32:$VI,33:$VJ,37:$VK,39:$VL},o($VR,[2,19]),{11:[1,98]},{10:[2,47],11:[1,99],20:[1,100]},{10:$V7,18:101},{10:$Vb,11:$Vc,21:102,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{11:[1,103]},{11:[1,104]},{14:[1,105]},{10:[2,44]},{10:[2,45]},{10:[2,46]},o($Va,[2,15]),o($VC,[2,75]),{10:$Vb,11:$Vc,21:106,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($V6,[2,7]),o($VR,[2,18]),{10:$Vb,11:$Vc,21:107,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Va,[2,41],{30:108,21:109,10:$Vb,11:$Vc,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk}),{10:$Vb,11:$Vc,21:110,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($VR,$Vl,{6:112,7:$Vm,19:[1,111],27:$V8}),o($VR,$Vl,{6:113,7:$Vm,43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{10:$Vb,11:$Vc,21:114,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$VS,11:$VT,38:115,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$V01,29:$V11,34:126,41:127},o($Va,[2,48],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{13:[1,130],43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB},{13:[1,131],27:[1,132]},o($Va,[2,40],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($VR,$Vl,{6:133,7:$Vm,43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{20:[1,134]},o($VR,[2,23]),o($VR,[2,25]),{13:[1,135],43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB},{13:[1,136],43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1},{10:$VS,11:$VT,38:152,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:153,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},o($Vh1,[2,94]),o($Vh1,[2,95]),o($Vh1,[2,96]),o($Vh1,[2,97]),o($Vh1,[2,98]),o($Vh1,[2,99]),o($Vh1,[2,100],{11:[1,154]}),{10:$VS,11:$VT,38:155,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$V01,16:[1,156],29:$V11,41:157},o($Vi1,[2,36]),{11:[1,158]},{20:[1,159]},o($VR,$Vl,{6:160,7:$Vm}),o($VR,$Vl,{6:161,7:$Vm}),{10:$Vb,11:$Vc,21:162,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($VR,[2,24]),{10:$Vb,11:$Vc,21:163,43:$Vd,44:$Ve,59:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{14:[1,164]},{14:[1,165]},{10:$VS,11:$VT,38:166,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:167,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:168,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:169,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:170,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:171,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:172,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:173,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:174,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:175,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:176,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:177,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:178,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:179,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:180,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},o($Vh1,[2,77]),o($Vh1,[2,78]),{65:[1,181]},{13:[1,182],43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1},{37:[1,183]},o($Vi1,[2,35]),{10:$VS,11:$VT,38:184,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$VS,11:$VT,38:185,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},o($VR,[2,20]),o($VR,[2,21]),o($Va,[2,39],{43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),o($VR,$Vl,{6:186,7:$Vm,43:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB}),{10:$V01,29:$V11,34:187,41:127},{10:$V01,29:$V11,34:188,41:127},o($Vj1,[2,79],{46:$V41,47:$V51,48:$V61,49:$V71}),o($Vj1,[2,80],{46:$V41,47:$V51,48:$V61,49:$V71}),o($Vk1,[2,81],{48:$V61}),o($Vk1,[2,82],{48:$V61}),o($Vh1,[2,83]),o($Vk1,[2,84],{48:$V61}),o($Vl1,[2,85],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71}),o($Vl1,[2,86],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71}),o($Vl1,[2,87],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71}),o($Vl1,[2,88],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71}),o($Vm1,[2,89],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,57:$Vf1,58:$Vg1}),o($Vm1,[2,90],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,57:$Vf1,58:$Vg1}),o($Vm1,[2,91],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,57:$Vf1,58:$Vg1}),o($Vn1,[2,92],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1}),o($Vn1,[2,93],{43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1}),{13:[1,189]},o($Vh1,[2,102]),{11:[1,190]},{13:[1,191],43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1},o($Vi1,$Vl,{6:192,7:$Vm,43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1}),o($VR,[2,22]),{10:$V01,16:[1,193],29:$V11,41:157},{10:$V01,16:[1,194],29:$V11,41:157},o($Vh1,[2,101]),{10:$VS,11:$VT,38:195,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},o($Vi1,$Vl,{6:196,7:$Vm}),o($Vi1,[2,38]),o($VR,[2,29],{35:197,36:198,40:[1,199]}),o($VR,[2,30]),{13:[1,200],43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1},o($Vi1,[2,37]),o($VR,[2,27],{36:201,40:[1,202]}),o($VR,[2,28]),{14:$Vo1,33:[1,203]},{7:[1,205]},o($VR,[2,26]),{14:$Vo1,33:[1,206]},{11:[1,207]},{10:$V01,29:$V11,34:208,41:127},o($VR,[2,31]),{11:[1,209]},{10:$VS,11:$VT,38:210,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{10:$V01,16:[1,211],29:$V11,41:157},{10:$VS,11:$VT,38:212,43:$VU,44:$VV,59:$VW,60:$VX,61:$VY,62:$VZ,63:$V_,64:$V$},{13:[1,213],43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1},o($VR,[2,32]),{13:[1,214],43:$V21,45:$V31,46:$V41,47:$V51,48:$V61,49:$V71,50:$V81,51:$V91,52:$Va1,53:$Vb1,54:$Vc1,55:$Vd1,56:$Ve1,57:$Vf1,58:$Vg1},{14:[1,215]},{14:[1,216]},{10:$V01,29:$V11,34:217,41:127},{10:$V01,29:$V11,34:218,41:127},{10:$V01,16:[1,219],29:$V11,41:157},{10:$V01,16:[1,220],29:$V11,41:157},o($Vp1,[2,34]),o($Vp1,[2,33])],
defaultActions: {7:[2,13],8:[2,14],9:[2,9],10:[2,10],11:[2,11],12:[2,12],13:[2,1],90:[2,44],91:[2,45],92:[2,46]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var respuesta = "";
	var Entorno1 = new Casa();
	var GraficasDOT = new Graficas();
	var contador = 0;
	
	
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 29;
break;
case 3:return 7;
break;
case 4:return 11;
break;
case 5:return 13;
break;
case 6:return 'CORIZQ';
break;
case 7:return 'CORDER';
break;
case 8:return 14;
break;
case 9:return 16;
break;
case 10:return 27;
break;
case 11:return 45;
break;
case 12:return 43;
break;
case 13:return 46;
break;
case 14:return 47;
break;
case 15:return 48;
break;
case 16:return 49;
break;
case 17:return 53;
break;
case 18:return 52;
break;
case 19:return 50;
break;
case 20:return 51;
break;
case 21:return 57;
break;
case 22:return 58;
break;
case 23:return 54;
break;
case 24:return 55;
break;
case 25:return 56;
break;
case 26:return 44;
break;
case 27:return 62;
break;
case 28:return 63;
break;
case 29:return 25;
break;
case 30:return 26;
break;
case 31:return 22;
break;
case 32:return 23;
break;
case 33:return 24;
break;
case 34:return 32;
break;
case 35:return 19;
break;
case 36:return 20;
break;
case 37:return "ELIF";
break;
case 38:return "ELELSE";
break;
case 39:return "ELWHILE";
break;
case 40:return "ELDO";
break;
case 41:
break;
case 42:
break;
case 43:return 60;
break;
case 44:return 59;
break;
case 45:return "CARACTER";
break;
case 46:return "CADENA";
break;
case 47:return "ID";
break;
case 48:return 5;
break;
case 49: 
					alert('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
       					console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
					Entorno1.LosErrores +="<tr>";
					Entorno1.LosErrores += "<td>" + "Sintáctico" + "  </td>" ;
					Entorno1.LosErrores += "<td>" + "Caracter no perteneciente" + yy_.yytext + " </td>";
					Entorno1.LosErrores += "<td>" + yy_.yylloc.first_line  + "</td>";
					Entorno1.LosErrores += "<td>" + yy_.yylloc.first_column+ "</td>";
					Entorno1.LosErrores += "</tr>";	   
					
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:print\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:return\b)/i,/^(?::)/i,/^(?:=)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:('[a-zA-Z0-9_]'))/i,/^(?:"([^\\\"]|\\"|\\t|\\n|\\r|\\)*")/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}