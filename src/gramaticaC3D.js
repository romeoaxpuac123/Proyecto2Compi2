/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaC3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,15],$V5=[1,10],$V6=[1,16],$V7=[1,11],$V8=[1,9],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,17],$Vd=[5,7,12,14,15,17,20,21,22,23,27,30,35,36],$Ve=[1,43],$Vf=[1,45],$Vg=[1,44],$Vh=[1,41],$Vi=[1,42],$Vj=[10,32],$Vk=[1,68],$Vl=[1,67],$Vm=[1,69],$Vn=[1,70],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,76],$Vu=[1,77],$Vv=[10,19,26,29,37,38,39,40,41,42,43,44,45,46],$Vw=[10,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"ID":7,"IGUAL":8,"expresionC3D":9,"PTyCOMA":10,"expresion":11,"ETIQUETAS":12,"DOSP":13,"GOTO":14,"VAR":15,"LISTA_TES":16,"STACK":17,"CORIZQ":18,"CORDER":19,"HEAP":20,"LA_P":21,"LA_H":22,"PROCX":23,"IDENTIFICADOC3D":24,"BEGINX":25,"MENOS":26,"ELIF":27,"PARIZQ":28,"PARDER":29,"IMPRMIR":30,"IMPRIMIRCARACTER":31,"COMA":32,"IMPRIMIRDECIMAL":33,"IMPRIMIRENTERO":34,"ELFINAL":35,"LLAMADA":36,"MAS":37,"POR":38,"DIVIDIDO":39,"MODULO":40,"MAYOR":41,"MENOR":42,"MENORIGUAL":43,"MAYORIGUAL":44,"IGUALDAD":45,"DESIGUALDAD":46,"ENTERO":47,"DECIMAL":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"ID",8:"IGUAL",10:"PTyCOMA",12:"ETIQUETAS",13:"DOSP",14:"GOTO",15:"VAR",17:"STACK",18:"CORIZQ",19:"CORDER",20:"HEAP",21:"LA_P",22:"LA_H",23:"PROCX",24:"IDENTIFICADOC3D",25:"BEGINX",26:"MENOS",27:"ELIF",28:"PARIZQ",29:"PARDER",30:"IMPRMIR",31:"IMPRIMIRCARACTER",32:"COMA",33:"IMPRIMIRDECIMAL",34:"IMPRIMIRENTERO",35:"ELFINAL",36:"LLAMADA",37:"MAS",38:"POR",39:"DIVIDIDO",40:"MODULO",41:"MAYOR",42:"MENOR",43:"MENORIGUAL",44:"MAYORIGUAL",45:"IGUALDAD",46:"DESIGUALDAD",47:"ENTERO",48:"DECIMAL"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,4],[6,4],[6,2],[6,3],[6,3],[6,5],[6,5],[6,5],[6,5],[6,3],[6,7],[6,7],[6,4],[6,8],[6,7],[6,7],[6,7],[6,7],[6,7],[6,1],[6,7],[6,7],[6,4],[6,3],[16,3],[16,1],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,4],[9,3],[9,3],[9,4],[9,4],[11,1],[11,1],[11,1],[11,1],[11,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
{
			document.getElementById("Reporte_Optimizacion").innerHTML = "";
			var ReporteErrores = "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Dando estilo a tablas</title>";
			ReporteErrores += "<link rel=\"stylesheet\" type=\"text/css\" href=\"tablas.css\"></head><body><div id=\"main-container\">";
			ReporteErrores += "<table><thead><tr><th>DESCRIPCION</th><th>LINEA</th></tr></thead>";

			ReporteErrores += Entorno1.LosErrores;
			ReporteErrores += "</table></div></body></html>"

			document.getElementById("Reporte_Optimizacion").innerHTML = ReporteErrores;
	    }
    
break;
case 2: case 3:


	
break;
case 4:

			alert('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
    
	
break;
case 5:

		if(contador == 0){
			var nuevo = new Optimizar("Optimizar");
			var IDS = new Nodo($$[$0-3]);
			nuevo.Hijos[0] = IDS;
			nuevo.Hijos[1] = $$[$0-1];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			this.$ = nuevo.Ejecutar(Entorno1);
		}
    
break;
case 6:

		//alert("hola1->" + Parametro1);
		//alert("hola2->" + Parametro2);
		
		
		if($$[$0-3] == Parametro2 && $$[$0-1].Nombre == Parametro1){
			Entorno1.LosErrores +="<tr>";
			Entorno1.LosErrores += "<td>" +  "Eliminación de instrucciones redundantes de carga y  almacenamiento : Se optimizó por regla 1 "   + " </td>";
			Entorno1.LosErrores += "<td>" + this._$.first_line; + "</td>";
			Entorno1.LosErrores += "</tr>";
		}else{
			
			if(contador == 0){
			
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-3] + " = " + $$[$0-1].Nombre + ";\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
			}
		}
		Parametro1 = $$[$0-3];
			Parametro2 = $$[$0-1].Nombre;
		
		
    
break;
case 7:

		if(respuesta == $$[$0-1]){
			contador = 0;
		}else{
			contador = 1;
		}
		
		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-1] + ":"+ "\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 8:

		
		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-2] + " " + $$[$0-1] + ";"+ "\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 9:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + ";\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 10:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + "var Stack[];\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 11:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + "var Heap[];\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 12:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + "var P = 0;\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 13:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + "var H = 0;\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 14: case 28:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0] + "\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 15: case 16:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-6] + " " + $$[$0-5] + "" + $$[$0-4] +  "" + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].Nombre + "" + $$[$0]+"\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 17: case 27:

		if(contador == 0){
			var nuevo = new Optimizar("Optimizar");
			var IDS = new Nodo($$[$0-3]);
			nuevo.Hijos[0] = IDS;
			nuevo.Hijos[1] = $$[$0-1];
			nuevo.linea = this._$.first_line;
			nuevo.columna = this._$.first_column;
			this.$ = nuevo.Ejecutar(Entorno1);
		}
	
break;
case 18:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-7] + " " + $$[$0-6] + "" + $$[$0-5] +  "" + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + "" + $$[$0-1].Nombre+";\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 19:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-6] + " " + $$[$0-5] + " " + $$[$0-4] +  " " + $$[$0-3] + "" + $$[$0-2] + "" + $$[$0-1] + "" + $$[$0]+"\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}

	
break;
case 20:

		if(contador == 0){
			if(($$[$0-4].Hijos[0].Nombre == $$[$0-4].Hijos[2].Nombre) && $$[$0-4].Hijos[1].Nombre == "=="){
					contador = 1;
					respuesta = $$[$0-1];
					var Cadena1 = document.getElementById("texto1C3D").value;
					var Salida = Cadena1 + $$[$0-2] + " " + $$[$0-1] + $$[$0] + "\n";
					document.getElementById("texto1C3D").innerHTML = Salida;
					Entorno1.LosErrores +="<tr>";
					Entorno1.LosErrores += "<td>" +  "Eliminación de código inalcanzable : Se optimizó por regla 4 "   + " </td>";
					Entorno1.LosErrores += "<td>" + this._$.first_line; + "</td>";
					Entorno1.LosErrores += "</tr>";
			}
			else if(($$[$0-4].Hijos[0].Nombre != $$[$0-4].Hijos[2].Nombre) && $$[$0-4].Hijos[1].Nombre == "==" && 
				$$[$0-4].Hijos[0].TipoDato == "ENTERO"  && $$[$0-4].Hijos[2].TipoDato == "ENTERO"
				){
					//var Cadena1 = document.getElementById("texto1C3D").value;
					//var Salida = Cadena1 + $$[$0-6] + $$[$0-5] + $$[$0-4].Hijos[0].Nombre + " " +  $$[$0-4].Hijos[1].Nombre + " " + $$[$0-4].Hijos[2].Nombre  + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0] + "\n";
					//document.getElementById("texto1C3D").innerHTML = Salida;

					Entorno1.LosErrores +="<tr>";
					Entorno1.LosErrores += "<td>" +  "Eliminación de código inalcanzable : Se optimizó por regla 5 "   + " </td>";
					Entorno1.LosErrores += "<td>" + this._$.first_line; + "</td>";
					Entorno1.LosErrores += "</tr>";
			}
			
			else{
				var Cadena1 = document.getElementById("texto1C3D").value;
				var Salida = Cadena1 + $$[$0-6] + $$[$0-5] + $$[$0-4].Hijos[0].Nombre + " " +  $$[$0-4].Hijos[1].Nombre + " " + $$[$0-4].Hijos[2].Nombre  + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + $$[$0] + "\n";
				document.getElementById("texto1C3D").innerHTML = Salida;
			}
		}
		
	
break;
case 21: case 22:

		if(contador == 0){		
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2].Nombre + $$[$0-1] + $$[$0] + "\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 23:

		if(contador == 0){	
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2].Nombre + $$[$0-1] + $$[$0] + "\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 24:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + "end"+ "\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 25:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-6] + " " + $$[$0-5] + "" + $$[$0-4].Nombre +  "" + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1].Nombre + ";\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 26:

		if(contador == 0){
			var Cadena1 = document.getElementById("texto1C3D").value;
			var Salida = Cadena1 + $$[$0-6] + " " + $$[$0-5] + "" + $$[$0-4] +  "" + $$[$0-3] + " " + $$[$0-2].Nombre + " " + $$[$0-1] + ";\n";
			document.getElementById("texto1C3D").innerHTML = Salida;
		}
	
break;
case 29:

		var Cadena1 = document.getElementById("texto1C3D").value;
    	var Salida = Cadena1 + "," + $$[$0];
        document.getElementById("texto1C3D").innerHTML = Salida;
	
break;
case 30:

		var Cadena1 = document.getElementById("texto1C3D").value;
    	var Salida = Cadena1 + "var " + $$[$0];
        document.getElementById("texto1C3D").innerHTML = Salida;
	
break;
case 31:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("+");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
			
break;
case 32:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("+");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 33:
 
									var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("-");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;		
									
break;
case 34:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("-");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 35:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("*");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
									
break;
case 36:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("*");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 37:
 
								var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("/");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;			
									
break;
case 38:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("/");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 39:

			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("%");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	 
									
break;
case 40:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("%");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 41:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo(">");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
								
break;
case 42:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo(">");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 43:
 

		var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("<");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
								
break;
case 44:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("<");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 45:
 
		var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("<=");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
								
break;
case 46:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("<=");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 47:
 
		var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo(">=");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
								
break;
case 48:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo(">=");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;									
			
	
break;
case 49:
 
		var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("==");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
										
break;
case 50:
 
		var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-2];

			var Signo = new Nodo("<>");
			nuevo.Hijos[1] = Signo;

			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
	
break;
case 51:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("==");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
	
break;
case 52:
 
			var nuevo = new Nodo("SUMA");
			nuevo.Hijos[0] = $$[$0-3];

			var Signo = new Nodo("<>");
			nuevo.Hijos[1] = Signo;

			$$[$0].Nombre = "-" + $$[$0].Nombre; 
			nuevo.Hijos[2] = $$[$0];

			this.$ = nuevo;	
	
break;
case 53:

			var nuevo = new Nodo($$[$0]);
			nuevo.Nombre = $$[$0];
			nuevo.TipoDato = "ENTERO";
			this.$ = nuevo;
								
break;
case 54:
 
			var nuevo = new Nodo($$[$0]);
			nuevo.Nombre = $$[$0];
			nuevo.TipoDato = "DECIMAL";
			this.$ = nuevo;						
									
break;
case 55:
 
		var nuevo = new Nodo($$[$0]);
		nuevo.Nombre = $$[$0];
		nuevo.TipoDato = "ID";
		this.$ = nuevo;
										
									
break;
case 56:

		var nuevo = new Nodo("H");
		nuevo.Nombre = $$[$0];
		nuevo.TipoDato = "H";
		this.$ = nuevo;
	
break;
case 57:

		var nuevo = new Nodo("P");
		nuevo.Nombre = $$[$0];
		nuevo.TipoDato = "P";
		this.$ = nuevo;
	
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:$V0,12:$V1,14:$V2,15:$V3,17:$V4,20:$V5,21:$V6,22:$V7,23:$V8,27:$V9,30:$Va,35:$Vb,36:$Vc},{1:[3]},{5:[1,18],6:19,7:$V0,12:$V1,14:$V2,15:$V3,17:$V4,20:$V5,21:$V6,22:$V7,23:$V8,27:$V9,30:$Va,35:$Vb,36:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),{8:[1,20]},{13:[1,21]},{12:[1,22]},{7:[1,28],16:23,17:[1,24],20:[1,25],21:[1,26],22:[1,27]},{24:[1,29]},{18:[1,30]},{8:[1,31]},{28:[1,32]},{28:[1,33]},o($Vd,[2,24]),{18:[1,34]},{8:[1,35]},{24:[1,36]},{1:[2,1]},o($Vd,[2,2]),{7:$Ve,9:37,11:38,17:[1,40],20:[1,39],21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vd,[2,7]),{10:[1,46]},{10:[1,47],32:[1,48]},{18:[1,49]},{18:[1,50]},{8:[1,51]},{8:[1,52]},o($Vj,[2,30]),{25:[1,53]},{7:[1,55],22:[1,54]},{7:$Ve,9:56,11:57,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{7:$Ve,9:58,11:57,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{31:[1,59],33:[1,60],34:[1,61]},{7:$Ve,11:62,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{7:$Ve,9:63,11:57,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{10:[1,64]},{10:[1,65]},{10:[1,66],26:$Vk,37:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu},{18:[1,78]},{18:[1,79]},o($Vv,[2,53]),o($Vv,[2,54]),o($Vv,[2,55]),o($Vv,[2,56]),o($Vv,[2,57]),o($Vd,[2,8]),o($Vd,[2,9]),{7:[1,80]},{19:[1,81]},{19:[1,82]},{7:$Ve,11:83,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{7:$Ve,11:84,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vd,[2,14]),{19:[1,85]},{19:[1,86]},{10:[1,87]},{26:$Vk,37:$Vl,38:$Vm,39:$Vn,40:$Vo,41:$Vp,42:$Vq,43:$Vr,44:$Vs,45:$Vt,46:$Vu},{29:[1,88]},{32:[1,89]},{32:[1,90]},{32:[1,91]},{19:[1,92]},{10:[1,93]},o($Vd,[2,28]),o($Vd,[2,5]),o($Vd,[2,6]),{7:$Ve,11:94,21:$Vf,22:$Vg,26:[1,95],47:$Vh,48:$Vi},{7:$Ve,11:96,21:$Vf,22:$Vg,26:[1,97],47:$Vh,48:$Vi},{7:$Ve,11:98,21:$Vf,22:$Vg,26:[1,99],47:$Vh,48:$Vi},{7:$Ve,11:100,21:$Vf,22:$Vg,26:[1,101],47:$Vh,48:$Vi},{7:$Ve,11:102,21:$Vf,22:$Vg,26:[1,103],47:$Vh,48:$Vi},{7:$Ve,11:104,21:$Vf,22:$Vg,26:[1,105],47:$Vh,48:$Vi},{7:$Ve,11:106,21:$Vf,22:$Vg,26:[1,107],47:$Vh,48:$Vi},{7:$Ve,11:108,21:$Vf,22:$Vg,26:[1,109],47:$Vh,48:$Vi},{7:$Ve,11:110,21:$Vf,22:$Vg,26:[1,111],47:$Vh,48:$Vi},{7:$Ve,11:112,21:$Vf,22:$Vg,26:[1,113],47:$Vh,48:$Vi},{7:$Ve,11:114,21:$Vf,22:$Vg,26:[1,115],47:$Vh,48:$Vi},{7:[1,116]},{7:$Ve,11:117,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vj,[2,29]),{10:[1,118]},{10:[1,119]},{10:[1,120]},{10:[1,121]},{8:[1,122]},{8:[1,123]},o($Vd,[2,17]),{14:[1,124]},{7:$Ve,11:125,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{7:$Ve,11:126,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{7:$Ve,11:127,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{8:[1,128]},o($Vd,[2,27]),o($Vw,[2,31]),{7:$Ve,11:129,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,33]),{7:$Ve,11:130,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,35]),{7:$Ve,11:131,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,37]),{7:$Ve,11:132,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,39]),{7:$Ve,11:133,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,41]),{7:$Ve,11:134,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,43]),{7:$Ve,11:135,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,45]),{7:$Ve,11:136,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,47]),{7:$Ve,11:137,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,49]),{7:$Ve,11:138,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,50]),{7:$Ve,11:139,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{19:[1,140]},{19:[1,141]},o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),{7:$Ve,11:142,21:$Vf,22:$Vg,26:[1,143],47:$Vh,48:$Vi},{7:$Ve,11:144,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{12:[1,145]},{29:[1,146]},{29:[1,147]},{29:[1,148]},{7:$Ve,11:149,21:$Vf,22:$Vg,47:$Vh,48:$Vi},o($Vw,[2,32]),o($Vw,[2,34]),o($Vw,[2,36]),o($Vw,[2,38]),o($Vw,[2,40]),o($Vw,[2,42]),o($Vw,[2,44]),o($Vw,[2,46]),o($Vw,[2,48]),o($Vw,[2,51]),o($Vw,[2,52]),{10:[1,150]},{10:[1,151]},{10:[1,152]},{7:$Ve,11:153,21:$Vf,22:$Vg,47:$Vh,48:$Vi},{10:[1,154]},{10:[1,155]},{10:[1,156]},{10:[1,157]},{10:[1,158]},{10:[1,159]},o($Vd,[2,19]),o($Vd,[2,26]),o($Vd,[2,15]),{10:[1,160]},o($Vd,[2,16]),o($Vd,[2,20]),o($Vd,[2,21]),o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,[2,25]),o($Vd,[2,18])],
defaultActions: {18:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	var respuesta = "";
	var Entorno1 = new Casa();
	var GraficasDOT = new Graficas();
	var contador = 0;
	var Parametro1 = "Romeo";
	var Parametro2 = "Axpuac";

	
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return "IMPRIMIRCARACTER";
break;
case 3:return "IMPRIMIRENTERO";
break;
case 4:return "IMPRIMIRDECIMAL";
break;
case 5:return "ELFINAL";
break;
case 6:return 30;
break;
case 7:return 14;
break;
case 8:return 10;
break;
case 9:return 'INCREMENTO';
break;
case 10:return 'DECINCREMENTO';
break;
case 11:return 28;
break;
case 12:return 29;
break;
case 13:return 18;
break;
case 14:return 19;
break;
case 15:return 'LLAVIZQ';
break;
case 16:return 'LLAVDER';
break;
case 17:return 32;
break;
case 18:return 37;
break;
case 19:return 26;
break;
case 20:return 38;
break;
case 21:return 39;
break;
case 22:return 'POTENCIA';
break;
case 23:return 40;
break;
case 24:return 46;
break;
case 25:return 44;
break;
case 26:return 43;
break;
case 27:return 41;
break;
case 28:return 42;
break;
case 29:return 45;
break;
case 30:return 'AND';
break;
case 31:return 'OR';
break;
case 32:return 'XOR';
break;
case 33:return 'NOT';
break;
case 34:return 8;
break;
case 35:return 13;
break;
case 36:return 15;
break;
case 37:return 17;
break;
case 38:return 20;
break;
case 39:return 21;
break;
case 40:return 22;
break;
case 41:return "PROCX";
break;
case 42:return "BEGINX";
break;
case 43:return 27;
break;
case 44:return 36;
break;
case 45:
break;
case 46:
break;
case 47:return 48;
break;
case 48:return 47;
break;
case 49:return "CARACTER";
break;
case 50:return "CADENA";
break;
case 51:return "ID";
break;
case 52:return "ETIQUETAS";
break;
case 53:return "IDENTIFICADOC3D";
break;
case 54:return 5;
break;
case 55: 
						alert('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
       					console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
				   
					
break;
}
},
rules: [/^(?:[#][*][^*]*[*]+([^\/*][^*]*[*]+)*[#])/i,/^(?:#.*)/i,/^(?:"%c")/i,/^(?:"%i")/i,/^(?:"%d")/i,/^(?:end\b)/i,/^(?:print\b)/i,/^(?:goto\b)/i,/^(?:;)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^\^)/i,/^(?:%)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:=)/i,/^(?::)/i,/^(?:var\b)/i,/^(?:Stack\b)/i,/^(?:Heap\b)/i,/^(?:P\b)/i,/^(?:H\b)/i,/^(?:proc\b)/i,/^(?:begin\b)/i,/^(?:if\b)/i,/^(?:call\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:('[a-zA-Z0-9_]'))/i,/^(?:"([^\\\"]|\\"|\\t|\\n|\\r|\\)*")/i,/^(?:([t])[0-9]*)/i,/^(?:([L])[0-9]*)/i,/^(?:([a-zA-Z])[a-zA-Z0-9ñÑ_]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaC3D;
exports.Parser = gramaticaC3D.Parser;
exports.parse = function () { return gramaticaC3D.parse.apply(gramaticaC3D, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}